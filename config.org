#+TITLE: Emacs Configuration File 
#+AUTHOR: J. C . Koch
#+EMAIL: jckoch@ualberta.ca
#+TAGS: TODO(t) | DISABLED(d)

* Personal Information
Set a user name and email address for Emacs to use if needed.

#+begin_src emacs-lisp
(setq user-full-name "James Koch"
      user-mail-address "jckoch@ualberta.ca")
#+end_src

* Sane Defaults
** General
Sane defaults to customize Emacs configuration for the 21st century. 
First globally turn on visual line mode and line numbers for all buffer/file types.
Introduce the diminish package to diminish 'visual-line-mode' minor mode display on the mode line (i.e. all buffers will be word wrapped so showing this on the mode line is redundant).

#+begin_src emacs-lisp
(global-visual-line-mode 1) ; 1 for on, 0 for off.
(diminish 'visual-line-mode)
(global-linum-mode 1) ; 1 for on, 0 for off.
#+END_SRC

#+RESULTS:
: t

Next set the default coding system to /UTF-8/ (i.e. unicode).

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

Set the default tab width to 4 spaces. Change the default behaviour to answering questions to simple 'y' and 'n' characters.

#+BEGIN_SRC emacs-lisp
(setq tab-width 4)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Stop Emacs from beeping.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+end_src

Change the default directory that emacs opens in to fit your needs.

#+begin_src emacs-lisp
(setq default-directory "/winc/jk/myLife")
#+end_src

#+RESULTS:
: /winc/jk/myLife

** Use ibuffer to list buffers open
Set the Buffer List buffer as to default with "ibuffer".

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-saved-filter-groups
    (quote (("default"
             ("dired" (mode . dired-mode))
	     ("org" (name . "^.*org$"))
	     ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
	     ("programming" (or
	                     (mode . python-mode)
			     (mode . octave-mode)))
             ("emacs" (or
	               (name . "^\\*scratch\\*$")
		       (name . "^\\*Messages\\*$")))
             ))))

(add-hook 'ibuffer-mode-hook
        (lambda ()
	  (ibuffer-auto-mode 1)
	  (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

#+RESULTS:
| lambda | nil | (ibuffer-auto-mode 1) | (ibuffer-switch-to-saved-filter-groups default) |

** Use-Package Configuration
Basic 'use-package' configuratioin.

#+BEGIN_SRC emacs-lisp
(setq use-package-always-ensure t)
#+END_SRC

#+RESULTS:
: t

** Ivy-Mode

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d")
  (bind-key "C-c C-r" 'ivy-resume)
  (setq org-refile-use-outline-path 'file
      org-outline-path-complete-in-steps nil))
#+END_SRC

#+RESULTS:
: t

** Auto Complete
Auto Complete is a mode for Emacs that provides auto completion in buffers. Auto Completion works for most code based modes in Emacs. It does not provide auto completion support in Org-Mode.

#+begin_src emacs-lisp
(use-package auto-complete
  :diminish auto-complete-mode
  :config
  (global-auto-complete-mode t)
  (ac-config-default))
#+end_src

#+RESULTS:
: t

** Undo-Tree
Package improves undo/redo commands within Emacs. Note that custom key binding for undo "C-z" replaces (removes) normal command to minimize the Emacs window.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish undo-tree-mode
  :config
  (global-undo-tree-mode 1) ;;turn on everywhere
  (global-set-key (kbd "C-z") 'undo)
  (defalias 'redo 'undo-tree-redo)
  (global-set-key (kbd "C-S-z") 'redo))
#+END_SRC

#+RESULTS:
: t

** Try Other Packages
A package to try other Emacs Packages without having to install the package.

#+BEGIN_SRC emacs-lisp
(use-package try
  :diminish try-mode)
#+END_SRC

#+RESULTS:

* Emacs Appearance
** Load Themes
Set the default theme to the tango-dark, font to Monospace-14, and change the cursor to a hbar. 
Set the cursor to stop blinking.

#+begin_src emacs-lisp
;; (add-to-list 'load-path "~/.emacs.d/themes")
;; (require 'tango-2-theme)
;; (load-theme 'tango-2)

(load-theme 'tango-dark)

(set-default 'cursor-type 'hbar)
;; (set-cursor-color "red")
(blink-cursor-mode -1)

;; (custom-set-faces
;;  '(org-block-begin-line ((t (:underline "#A9A9A9" :foreground "#A9A9A9" :background "#2d3e56"))))
;;  '(org-block ((t (:background "#1a2432"))))
;;  '(org-block-end-line ((t (:underline "#A9A9A9" :foreground "#A9A9A9" :background "#2d3e56"))))
;;  '(org-block-results-line ((t (:underline "#A9A9A9" :foreground "#A9A9A9" :background "#2d3e56"))))
;;  )

;; (load-theme 'tangotango)

;; Alternative Black and White Basic Theme
;;(set-background-color "black")
;;(set-foreground-color "white")

(add-to-list 'default-frame-alist
             '(font . "Monospace-14"))
#+end_src 

#+RESULTS:
: ((font . Monospace-14) (vertical-scroll-bars))

 #+RESULTS: : ((font . Monospace-14) (vertical-scroll-bars))

*** Switch Themes
The following emacs-lisp function allows for easy switching of themes and the ability to disable the active theme. M-<F12> can be used to switch themes while M-<F11> to disable current theme.

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

;; lisp function ot disable active theme
(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "M-<f12>" 'switch-theme) 
(bind-key "M-<f11>" 'disable-active-themes)
 #+end_src

 #+RESULTS:
 : disable-active-themes
** Window Splitting Commands
These custom emacs-lisp functions redefine vertically and horizontal window splitting emacs functions in order to switch to the other window when the emacs window is split into two windows. 

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

#+RESULTS:
: hsplit-other-window

** Ace-Window
For easier navigation with many windows open.

#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :bind ("M-p" . ace-window))
#+END_SRC

#+RESULTS:
: ace-window
* TODO Python
** NEXT Elpy Mode
Elpy is used to customize python in emacs to a fullfledged IDE.

#+BEGIN_SRC emacs-lisp
(use-package elpy
   :ensure t
   :config
   (exec-path-from-shell-copy-env "PATH")
   (setq python-shell-interpreter "ipython"
     python-shell-interpreter-args "-i --simple-prompt")
   (elpy-enable)
   (pyvenv-mode))
#+END_SRC

#+RESULTS:
: t

** NEXT Pyenv Virtualenvs
Enable pyenv-mode to manage python environments.

#+BEGIN_SRC emacs-lisp
(use-package pyenv-mode
  :init
  (add-to-list 'exec-path "~/.pyenv/shims")
  (setenv "WORKON_HOME" "~/.virtualenvs")
  :config
  (pyenv-mode)
  :bind ("C-x p w" . pyvenv-workon))

(defun ssbb-pyenv-hook ()
"Automatically activates pyenv version if .python-version file exists."
(f-traverse-upwards
(lambda (path)
  (let ((pyenv-version-path (f-expand ".python-version" path)))
		(if (f-exists? pyenv-version-path)
				(pyenv-mode-set (s-trim (f-read-text pyenv-version-path 'utf-8))))))))

(add-hook 'find-file-hook 'ssbb-pyenv-hook)
#+END_SRC

#+RESULTS:
| ssbb-pyenv-hook | recentf-track-opened-file | url-handlers-set-buffer-mode | global-undo-tree-mode-check-buffers | undo-tree-load-history-hook | global-auto-complete-mode-check-buffers | global-linum-mode-check-buffers | global-visual-line-mode-check-buffers | global-font-lock-mode-check-buffers | epa-file-find-file-hook | vc-refresh-state |

** DONE ob-ipython (with scimax improvments)
ob-ipython is used for interactive python source blocks in Org-Mode.
Manual installation of ob-ipython from Github is required plus dependencies (i.e. dash).

#+BEGIN_SRC emacs-lisp
;; Enable dependencies of ob-ipython
(add-to-list 'load-path "~/.emacs.d/dev-pkgs/dash.el")
(require 'dash)

;; load ob-ipython
(add-to-list 'load-path "~/.emacs.d/dev-pkgs/ob-ipython")
(require 'ob-ipython)

;; load scimax ob-ipython improvements
(add-to-list 'load-path "~/Documents/scimax")
(require 'scimax-org-babel-ipython-upstream)
#+END_SRC

#+RESULTS:
: scimax-org-babel-ipython-upstream

* Org-Mode
** General Setup
*** *TODO* Keywords
This defines a basic workflow of TODO keywords.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "IN-PROGRESS(i)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("IN-PROGRESS" :foreground "yellow" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))
#+END_SRC

#+RESULTS:
| TODO        | :foreground | red          | :weight | bold |
| NEXT        | :foreground | blue         | :weight | bold |
| DONE        | :foreground | forest green | :weight | bold |
| IN-PROGRESS | :foreground | yellow       | :weight | bold |
| WAITING     | :foreground | orange       | :weight | bold |
| HOLD        | :foreground | magenta      | :weight | bold |
| CANCELLED   | :foreground | forest green | :weight | bold |
| MEETING     | :foreground | forest green | :weight | bold |
| PHONE       | :foreground | forest green | :weight | bold |

TODO state tag triggers.

#+BEGIN_SRC emacs-lisp
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC

#+RESULTS:
| CANCELLED | (CANCELLED . t) |             |        |
| WAITING   | (WAITING . t)   |             |        |
| HOLD      | (WAITING)       | (HOLD . t)  |        |
| done      | (WAITING)       | (HOLD)      |        |
| TODO      | (WAITING)       | (CANCELLED) | (HOLD) |
| NEXT      | (WAITING)       | (CANCELLED) | (HOLD) |
| DONE      | (WAITING)       | (CANCELLED) | (HOLD) |

*** Set Often Used Keys

#+begin_src emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cl" 'org-insert-link)
(global-set-key "\C-o" 'org-open-at-point)
(global-set-key "\C-cc" 'org-capture)
(bind-key "\C-c \C-x F" 'org-agenda-file-to-front)
(bind-key "\C-c \C-x r" 'org-remove-file)
#+end_src

#+RESULTS:
: org-remove-file

*** Org-Indent-Mode

#+BEGIN_SRC emacs-lisp
(setq org-startup-indented t)
#+END_SRC

#+RESULTS:
: t

*** Org-Refile
Set up org-refile to easily refile notes elsewhere. This elisp code is based on the article from the following blog: https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html.

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 2)))
(setq org-refile-use-outline-path 'file)
#+END_SRC

#+RESULTS:
: file

*** Org-Capture
Sets a global ``refile`` org-mode file for temporary TODO items.

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "/winc/jk/myLife/refile.org")
#+END_SRC

#+RESULTS:
: /winc/jk/myLife/refile.org

When a new task occurs and needs to be added, org-capture allows me to easily capture it.
I categorize it into a few new groups that I use as templates:
  + A new task (t)
  + A meeting (m)
  + A email I need to respond to (e)
  + A phone call (p)
  + A new note (n)
  + A interruption (i)
  + A new habit (h)
  + A org protocol (w)

#+BEGIN_SRC emacs-lisp
;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "/winc/jk/myLife/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("e" "respond" entry (file "/winc/jk/myLife/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t)
              ("n" "note" entry (file "/winc/jk/myLife/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("i" "Journal" entry (file+datetree "/winc/jk/myLife/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "/winc/jk/myLife/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "/winc/jk/myLife/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "/winc/jk/myLife/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "/winc/jk/myLife/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

#+RESULTS:
| t | todo         | entry | (file /winc/jk/myLife/refile.org)         | * TODO %?\n%U\n%a\n                                                                                                                          | :clock-in         | t | :clock-resume | t |
| e | respond      | entry | (file /winc/jk/myLife/refile.org)         | * NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n                                                                               | :clock-in         | t | :clock-resume | t |
| n | note         | entry | (file /winc/jk/myLife/refile.org)         | * %? :NOTE:\n%U\n%a\n                                                                                                                        | :clock-in         | t | :clock-resume | t |
| i | Journal      | entry | (file+datetree /winc/jk/myLife/diary.org) | * %?\n%U\n                                                                                                                                   | :clock-in         | t | :clock-resume | t |
| w | org-protocol | entry | (file /winc/jk/myLife/refile.org)         | * TODO Review %c\n%U\n                                                                                                                       | :immediate-finish | t |               |   |
| m | Meeting      | entry | (file /winc/jk/myLife/refile.org)         | * MEETING with %? :MEETING:\n%U                                                                                                              | :clock-in         | t | :clock-resume | t |
| p | Phone call   | entry | (file /winc/jk/myLife/refile.org)         | * PHONE %? :PHONE:\n%U                                                                                                                       | :clock-in         | t | :clock-resume | t |
| h | Habit        | entry | (file /winc/jk/myLife/refile.org)         | * NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string "%<<%Y-%m-%d %a .+1d/3d>>")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n |                   |   |               |   |

** Agenda Setup
*** Set Agenda Files
Set directory where all my files for the Org-Mode Agenda exist. Change or comment this out as necessary.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote ("/winc/jk/myLife")))
#+END_SRC

#+RESULTS:
| /winc/jk/myLife |

#+BEGIN_SRC emacs-lisp
(bind-key "M-q" 'toggle-truncate-lines)
(add-hook 'org-agenda-redo-all
          (lambda ()
            toggle-truncate-lines))
#+END_SRC

#+RESULTS:
| lambda | nil | toggle-truncate-lines |                            |
| lambda | nil | (visual-line-mode -1) | (toggle-truncate-lines 1)  |
| lambda | nil | (visual-line-mode -1) | (toggle-truncate-lines -1) |

*** Enable Org-Habits
Enable org-habits from within org-modules to start tracking some habits.

#+BEGIN_SRC emacs-lisp
(require 'org-habit)
; Enable habit tracking (and a bunch of other modules)
(setq org-modules (quote (org-habit)))

; position the habit graph on the agenda to the right of the default
(setq org-habit-graph-column 45)

(setq org-habit-show-habits-only-for-today nil)
(bind-key "<f7>" 'org-habit-toggle-habits)
#+END_SRC

#+RESULTS:
: org-habit-toggle-habits

*** Org-gcal Setup

#+BEGIN_SRC emacs-lisp
(use-package org-gcal
  :ensure t
  :config
  (setq org-gcal-client-id "277923490904-avim4dqfj9rrnbelljoughrk06elurdl.apps.googleusercontent.com"
        org-gcal-client-secret "S5MNloOHpvejXGOqBnzHuQKq"
        org-gcal-file-alist '(("jckoch@ualberta.ca" . "/winc/jk/myLife/ualberta.org")
                              ("ualberta.ca_bf9hqpg6k7rgk3lpf7lh9qs6c8@group.calendar.google.com" . "/winc/jk/myLife/private.org")))
  :bind ("S-g" . org-gcal-sync))
#+END_SRC

#+RESULTS:
: org-gcal-sync

** Exporting Customization
*** Export Backend Customization
**** Org Export Backend
OpenOffice (odt) export backend added to org-export-dispatcher as key bindings. This may or may not function as intended on Windows systems.

#+BEGIN_SRC emacs-lisp
(setq org-export-backends '(ascii beamer html icalendar latex odt))
#+END_SRC

#+RESULTS:
| ascii | beamer | html | icalendar | latex | odt |

**** LaTeX to PDF Process 
The LaTeX to PDF process is set for org-mode in order to properly export citations using BibTeX. Some tweaks may be necessary for this to work on Windows (a TeX distribution is necessary).

#+begin_src emacs-lisp
;; Set the pdf export process from org-mode
;; done to ensure citations and bibiographies are exported to LaTeX properly
(setq org-latex-pdf-process
    '("pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
      "bibtex %b" 
      "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f" 
      "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"))
#+end_src

#+RESULTS:
| pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f | bibtex %b | pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f | pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f |

**** LaTeX Beamer
Add Beamer LaTeX class to list of Org-Mode LaTeX classes available.

#+begin_src emacs-lisp
(eval-after-load "ox-latex"
  ;; update the list of LaTeX classes and associated header (encoding, etc.) 
  ;; and structure
  '(add-to-list 'org-latex-classes
                `("beamer"
                  ,(concat "\\documentclass[presentation]{beamer}\n"
                           "[DEFAULT-PACKAGES]"
                           "[PACKAGES]"
                           "[EXTRA]\n")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src

#+RESULTS:
*** Org-Ref Citation Manager
Org-Ref is a citation manager for Org-Mode. The setup includes pointing Org-Ref to a default (general) BibTeX file as the default bibliography as well as a directory containing the article as a PDF file. The Org-Ref documentation also suggests setting a notes file (currently I am not using this feature).

#+BEGIN_SRC emacs-lisp
(use-package org-ref 
  :init
  (require 'org-ref)
  (require 'doi-utils)
  (require 'org-ref-pdf)
  (setq org-ref-bibliography-notes "~/Documents/references/notes.org"
        org-ref-default-bibliography '("~/Documents/references/REFERENCES.bib")
        org-ref-pdf-directory "~/Documents/references/bibtex-pdfs/")
  (setq bibtex-completion-pdf-open-function
    (lambda (fpath)
      (start-process "open" "*open*" "open" fpath)))
  :config
  (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator "_"
        bibtex-autokey-year-title-separator "_"
        bibtex-autokey-titleword-separator ""
        bibtex-autokey-titlewords 3
        bibtex-autokey-titlewords-stretch 1
        bibtex-autokey-titleword-length 5))
#+END_SRC

#+RESULTS:
: t

Org-Ref is also great at Figure/Table/Equation references. The default key binding to insert a ref link for this type of cross-reference conflicts with the Org-Mode add file to Agenda list so is therefore changed to "C-c i". On some systems it may also be necessary on export to LaTeX/PDF to set the variable 'org-latex-prefer-user-labels' to nil (this is known bug in the Org-Ref GitHub repository).

#+BEGIN_SRC emacs-lisp
(setq org-latex-prefer-user-labels nil)
(bind-key "\C-c i" 'org-ref-helm-insert-ref-link)
#+END_SRC

#+RESULTS:
: org-ref-helm-insert-ref-link

*** Code to ensure a "References" header is not duplicated on export through LaTeX
Workaround code to ensure _References_ header is not duplicated on export to pdf through latex.

#+BEGIN_SRC emacs-lisp
;; ignore_heading tag in Org mode, based on the manual and func docs
(defun ignored-headlines-removal (backend)
  "Remove all headlines with tag ignore_heading in the current buffer.
     BACKEND is the export back-end being used, as a symbol."
  (org-map-entries
   (lambda () (delete-region (point) (progn (forward-line) (point))))
   "ignore_heading"))

(add-hook 'org-export-before-parsing-hook 'ignored-headlines-removal)
#+END_SRC

#+RESULTS:
| ignored-headlines-removal |

** Org Babel Languages
Default of emacs-lisp, ipython, python, and shell languages supported for org-babel. Code blocks run without need for confirmation by default. 
Note: Running IPython in Emacs requires the "ob-ipython" package which currently does not work.

#+begin_src emacs-lisp
  (setq org-ditaa-jar-path "/home/jkoch/.emacs.d/dev-pkgs/ditaa0_9/ditaa0_9.jar")
  (org-babel-do-load-languages
   'org-babel-load-languages (quote ((emacs-lisp . t)
                                     (latex . t)
				         (ditaa . t)
                                     (python . t)
                                     (ipython . t)
                                     (ledger . t))))


  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  (bind-key "<f2>" 'org-edit-src-code)
  (bind-key "<f3>" 'org-edit-src-exit)
#+end_src

#+RESULTS:
: org-edit-src-exit

** Time Clocking
*** Clock In/Out Easier Key Bindings
 
#+BEGIN_SRC emacs-lisp
;; Define clock in/out key bindings
(bind-key "<f5>" 'org-clock-in)
(bind-key "<f6>" 'org-clock-out) 
(setq org-clock-out-remove-zero-time-clocks t)
(setq org-clock-into-drawer t)
(org-clock-persistence-insinuate)
(setq org-clock-history-length 23)
;; Separate drawers for clocking and logs
(setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
;; Save the running clock and all clock history when exiting Emacs, load it on startup
(setq org-clock-persist t)
#+END_SRC

#+RESULTS:
: t

And the following setup to remove these empty LOGBOOK drawers if they occur.

#+BEGIN_SRC emacs-lisp
;; Remove empty LOGBOOK drawers on clock out
(defun bh/remove-empty-drawer-on-clock-out ()
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at (point))))

(add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+END_SRC

#+RESULTS:
| org-clock-remove-empty-clock-drawer | bh/remove-empty-drawer-on-clock-out |

*** Clock Report Customization
This changes the default behaviour of clock reports greater than 24 hours to report as "X day + X hours" to be reported as "X hours:Y minutes".

#+BEGIN_SRC emacs-lisp
;; Include current clocking task in clock reports
(setq org-clock-report-include-clocking-task t)
;; Clockreport time format
(setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
#+END_SRC

#+RESULTS:
| :hours | %d | :require-hours | t | :minutes | :%02d | :require-minutes | t |

** Previewing Equations and Symbols
*** Preview Latex Fragments
Fix to have white latex equation text on a dark background.

#+BEGIN_SRC emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :foreground "White"))
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC

#+RESULTS:
| :foreground | White | :background | default | :scale | 2.0 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |

*** CDLATEX Mode for Math Characters
Math character input mode can be turned on/off with the new key binding "C-c C-g".
This allows for the "`" character to be used other than for inserting math characters.

#+BEGIN_SRC emacs-lisp
(use-package cdlatex
  :config (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  :diminish org-cdlatex-mode)
#+END_SRC

#+RESULTS:
: t

** Prepare Meeting Notes
Quick elisp function to prepare meeting notes taken from http://doc.norang.ca/org-mode.html#MeetingNotes.

#+BEGIN_SRC emacs-lisp
(defun bh/prepare-meeting-notes ()
  "Prepare meeting notes for email
   Take selected region and convert tabs to spaces, mark TODOs with leading >>>, and copy to kill ring for pasting"
  (interactive)
  (let (prefix)
    (save-excursion
      (save-restriction
        (narrow-to-region (region-beginning) (region-end))
        (untabify (point-min) (point-max))
        (goto-char (point-min))
        (while (re-search-forward "^\\( *-\\\) \\(TODO\\|DONE\\): " (point-max) t)
          (replace-match (concat (make-string (length (match-string 1)) ?>) " " (match-string 2) ": ")))
        (goto-char (point-min))
        (kill-ring-save (point-min) (point-max))))))
#+END_SRC

#+RESULTS:
: bh/prepare-meeting-notes

** Native Org-Mode Presentations
To be able to present in org mode natively.

#+BEGIN_SRC emacs-lisp
(use-package org-tree-slide
  :ensure t
  :bind (("<f11>" . org-tree-slide-mode)))
#+END_SRC

#+RESULTS:
: org-tree-slide-mode

** Org Beamer Only Overlay Environment

Adds the "only" beamer environment in org mode (works only in Linux).

#+BEGIN_SRC emacs-lisp
;(add-to-list 'org-beamer-environments-extra
;             '("onlyenv" "O" "\\begin{onlyenv}%a" "\\end{onlyenv}"))
#+END_SRC

#+RESULTS:
* LaTeX
** AUCTeX
Configure AUCTeX to edit TeX files.

#+begin_src emacs-lisp
(use-package auctex
  :defer t
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
  (setq TeX-view-program-list '("Okular" "okular --unique %o#src:%n%b"))
  (setq TeX-view-program-selection '((output-dvi "Okular")
                                     (output-pdf "Okular"))))
#+end_src

#+RESULTS:

** RefTeX
Configure RefTeX (citation engine for LaTeX) to plug into AUCTeX.
For when working on TeX files.

#+begin_src emacs-lisp
(use-package reftex
  :defer t
  :config
  (setq reftex-plug-into-AUCTeX t)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
#+end_src

#+RESULTS:
: t
* Ledger-Mode
Plain-text double-entry accounting program.

#+BEGIN_SRC emacs-lisp
(use-package ledger-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.ledger\\'" . ledger-mode)))
#+END_SRC

#+RESULTS:
: t

* Flyspell
Enable Flyspell Mode. 
If you keep your spell check personal dictionary in particular location, change this variable as desired. 
Some of this configuration is taken from Joel Kuiper (https://joelkuiper.eu/spellcheck_emacs).

#+begin_src emacs-lisp
(use-package ispell
  :defer t
  :bind (("<f8>" . ispell-word)
         ("M-<f8>" . flyspell-mode))
  :config 
  (setq-default ispell-program-name "aspell")
  (setq ispell-personal-dictionary "~/.emacs.d/.ispell")
  (dolist (hook '(text-mode-hook))
     (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (mode '(emacs-lisp-mode-hook
                  python-mode-hook
		  R-mode-hook))
     (add-hook mode (lambda () (flyspell-prog-mode)))) 
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word)))
#+end_src

#+RESULTS:  
: flyspell-mode

*** New way of integrating a spell checker!!!

#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :defer t
  :bind ("C-;" . flyspell-correct-previous-word-generic)
  :config
  (setq-default ispell-program-name "aspell")
  (setq ispell-personal-dictionary "~/.emacs.d/.ispell")
  (dolist (hook '(text-mode-hook))
     (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (mode '(emacs-lisp-mode-hook
                  python-mode-hook
		  R-mode-hook))
     (add-hook mode (lambda () (flyspell-prog-mode)))) 
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word)))
#+END_SRC

#+RESULTS:
: flyspell-correct-previous-word-generic

* Magit
Set up Git version control from within Emacs using the package Magit.

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)))
#+end_src

#+RESULTS:
: magit-status
* Tramp

#+BEGIN_SRC emacs-lisp
(require 'tramp)
(setq tramp-default-method "ssh")
#+END_SRC

#+RESULTS:
: ssh
