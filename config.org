#+TITLE: Emacs Configuration
#+SUBTITLE: Part II (Main Configuration)
#+AUTHOR: J. C. Koch
#+EMAIL: jchkoch@gmail.com
#+SEQ_TODO: FIXME | FIXED

* About
After using plain vanilla GNU Emacs for a while, I decided to create my own config to simplify my daily life by adding customizations such as LaTeX, org-mode, ob-ipython, etc.

For more information about myself, you can visit my [[][LinkedIN profile]]. In the near future I will also be developing a website (stay tuned ...).

To manage package configurations, I use [[][use-package]] package from John Wiegley, that I recommend.

This configuratiion is mainly based on the following user configurations:
- [[https://github.com/rememberYou/.emacs.d][Terencio Agozzino]] (=rememberYou=);
- [[https://github.com/jwiegley/dot-emacs/][John Wiegley]] (=jwiegley=);
- [[https://github.com/sachac][Sacha Chua]] (=sachac=);
- [[https://github.com/angrybacon/dotemacs][Mathieu Marques]] (=angrybacon=).

Thanks to them for their incredible work!

* Start Up
Sane defaults to customize Emacs configuration for the 21st century.

** Better defaults
*** Visual line mode & line numbers
First globally turn on visual line mode and line numbers for all buffer/file types.
Introduce the diminish package to diminish 'visual-line-mode' minor mode display on the mode line (i.e. all buffers will be word wrapped so showing this on the mode line is redundant).

#+begin_src emacs-lisp
  (global-visual-line-mode 1) ; 1 for on, 0 for off.
  (diminish 'visual-line-mode)
  (global-linum-mode 1) ; 1 for on, 0 for off.
#+END_SRC

#+RESULTS:
: t

*** Set the default tab width to 4 spaces

#+BEGIN_SRC emacs-lisp
(setq tab-width 4)
#+END_SRC

*** Set default coding system
Next set the default coding system to /UTF-8/ (i.e. unicode).

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

#+RESULTS:
*** Follow symbolic file links

#+BEGIN_SRC emacs-lisp
  (setq vc-follow-symlinks t)
#+END_SRC

#+RESULTS:
: t
** Emacs Appearance
*** Set default theme
Set the default theme to the tango-dark, font to Monospace-14, and change the cursor to a hbar. 
Set the cursor to stop blinking.

#+begin_src emacs-lisp
  (load-theme 'tango-dark t)
  (set-default 'cursor-type 'hbar)
  (add-to-list 'default-frame-alist
               '(font . "Monospace-14"))
#+end_src

#+RESULTS:
: ((font . Monospace-14) (vertical-scroll-bars))

* Languages
** =emacs-lisp=

#+BEGIN_SRC emacs-lisp
  (use-package elisp-mode 
    :ensure nil
    :defer 0.1
    :delight emacs-lisp-mode "ξ")

  (add-hook 'emacs-lisp-mode-hook (lambda()
    (setq mode-name "ξ"))) 
#+END_SRC

** =latex=

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-save-query nil)
    (setq TeX-view-program-list '("Okular" "okular --unique %o#src:%n%b"))
    (setq TeX-view-program-selection '((output-dvi "Okular")
                                       (output-pdf "Okular"))))

  (use-package reftex
    :after auctex
    :config
    (setq reftex-plug-into-AUCTeX t)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
#+END_SRC

** =python-mode=

#+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :delight python-mode "π"
    :defer 0.1
    :mode "\\.py\\'")
#+END_SRC

#+RESULTS:

** =ob-ipython=

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :after dash)

  (use-package ob-ipython
    :after exec-path-from-shell
    :load-path "dev-pkgs/ob-ipython"
    :interpreter ("ipython" . python-mode)
    :config
    (exec-path-from-shell-initialize)
    (setq ob-ipython-suppress-execution-count t))

  (use-package dash
    :load-path "dev-pkgs/dash.el"
    :defer 0.1)
#+END_SRC

#+RESULTS:

** =elpy=

#+BEGIN_SRC emacs-lisp
  (use-package elpy
     :ensure t
     :init
     (elpy-enable)
     (pyvenv-mode)
     :config
     (exec-path-from-shell-copy-env "PATH")
     (add-to-list 'python-shell-completion-native-disabled-interpreters
                  "ipython")
     (setq python-shell-interpreter "ipython"
           python-shell-interpreter-args "-i --simple-prompt"
           python-shell-prompt-detect-failure-warning nil)
     (setq elpy-set-test-runner "Nose"))  
#+END_SRC

* Advanced Configuration
** =ivy-mode=

#+BEGIN_QUOTE
Ivy is an interactive interface for completion in Emacs. 
Emacs uses completion mechanism in a variety of contexts: code, menus, commands, variables, functions, etc. 
Completion entails listing, sorting, filtering, previewing, and applying actions on selected items. 
When active, ivy-mode completes the selection process by narrowing available choices while previewing in the minibuffer. 
Selecting the final candidate is either through simple keyboard character inputs or through powerful regular expressions.

-taken from Ivy User Manual Copyright (C) 2015-2018 Free Software Foundation, Inc. 
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :defer 0.1
    :delight ivy-mode "ν"
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :config
    (setq ivy-count-format "%d/%d")
    (setq ivy-use-virtual-buffers t)
    (setq org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil)
    :init (ivy-mode 1))

  (use-package ivy-pass
    :after ivy
    :commands ivy-pass)

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))
#+END_SRC

** =ibuffer=
Set the Buffer List buffer as to default with "ibuffer".

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :defer 1
    :init
    (add-hook 'ibuffer-mode-hook
              (lambda ()
                (ibuffer-auto-mode 1)
                (ibuffer-switch-to-saved-filter-groups "default")))
    :config
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("dired" (mode . dired-mode))
                   ("org" (name . "^.*org$"))
                   ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                   ("programming" (or
                                   (mode . python-mode)
                                   (mode . octave-mode)))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Messages\\*$")))
                   ("magit" (mode . Magit)) 
                   ))))
    :bind ("C-x C-b" . ibuffer))
#+END_SRC

#+RESULTS:
: ibuffer

** =undo-tree-mode=
Package improves undo/redo commands within Emacs. Note that custom key binding for undo "C-z" replaces (removes) normal command to minimize the Emacs window.

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :defer 1
    :delight undo-tree-mode "U"
    :config 
    (global-undo-tree-mode) ;;turn on everywhere
    (defalias 'redo 'undo-tree-redo)
    :bind (("C-z" . undo-tree-undo)
           ("C-S-z" . redo)))
#+END_SRC

#+RESULTS:
: redo

** =try=
A package to try out other interesting GNU Emacs packages without having to install the packages.

#+BEGIN_SRC emacs-lisp
  (use-package try
    :defer 5)
#+END_SRC

** =flyspell=
Enable Flyspell Mode. 
If you keep your spell check personal dictionary in particular location, change this variable as desired. 
Some of this configuration is taken from Joel Kuiper (https://joelkuiper.eu/spellcheck_emacs).

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :bind (("<f8>" . ispell-word)
           ("M-<f8>" . flyspell-mode))
    :config
    (setq-default ispell-program-name "aspell")
    (setq ispell-personal-dictionary (concat user-emacs-directory ".ispell"))
    (dolist (hook '(text-mode-hook))
       (add-hook hook (lambda () (flyspell-mode 1))))
    (dolist (mode '(emacs-lisp-mode-hook
                    python-mode-hook
                    R-mode-hook))
       (add-hook mode (lambda () (flyspell-prog-mode)))) 
    (defun flyspell-check-next-highlighted-word ()
      "Custom function to spell check next highlighted word"
      (interactive)
      (flyspell-goto-next-error)
      (ispell-word)))
#+END_SRC

#+RESULTS:
: flyspell-mode

** =magit=
Set up Git version control from within Emacs using the package Magit.

#+begin_src emacs-lisp
(use-package magit
  :bind (("C-x g" . magit-status)))
#+end_src

#+RESULTS:

** =ledger-mode=
Plain-text double-entry accounting program.

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :defer 1
    :mode "\\.ledger\\'")
#+END_SRC

#+RESULTS:

* =org-mode=

#+BEGIN_QUOTE
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.

[[http://orgmode.org/][Carsten Dominik]]
#+END_QUOTE

** General

#+BEGIN_SRC emacs-lisp
  (use-package org
    :delight org-mode "ΘΓζ"
    :ensure org-plus-contrib
    :config
    ;; TODO keywords
    (setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "REVIEW(r)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))
    (setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("REVIEW" :foreground "yellow" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))
    (setq org-use-fast-todo-selection t)
    ;; TODO state tag triggers
    (setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING") ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
    ;; Tag placement
    (setq org-tags-column -110)
    :bind (("<f12>" . org-agenda)
           ("C-c l" . org-insert-link)
	   ("C-o" . org-open-at-point)
	   ("C-c c" . org-capture)
           ("<f2>" . org-edit-src-code)
           ("<f3>" . org-edit-src-exit)
           ("<f5>" . org-clock-in)
           ("<f6>" . org-clock-out)
           ("<f7>" . org-habit-toggle-habits)
           ("<f9> I" . bh/punch-in)
           ("<f9> O" . bh/punch-out)
           ("<f9> SPC" . bh/clock-in-last-task)))
#+END_SRC

#+RESULTS:
: org-clock-out

** Agenda
*** Set agenda files
Set directory where all my files for the Org-Mode Agenda exist.
This code will set a directory and will be recursive into sub-directories.
Taken from https://www.reddit.com/r/orgmode/comments/6q6cdk/adding_files_to_the_agenda_list_recursively/.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (directory-files-recursively default-directory "\.org$"))
#+END_SRC

#+RESULTS:
: /home/jkoch/.emacs.d/

*** Custom agenda view
Custom agenda view to see today's calendar and a list of NEXT tasks that I can work on next.

#+BEGIN_SRC emacs-lisp
  (setq org-agenda-span 'day)
  (setq org-agenda-use-time-grid t)
  (setq org-agenda-tags-column -250)
  (add-hook 'org-agenda-mode-hook
          (lambda ()
            (visual-line-mode -1)
            (toggle-truncate-lines 1)))

  (setq org-agenda-custom-commands
        (quote (("N" "Notes" tags "NOTE"
                 ((org-agenda-overriding-header "Notes")
                  (org-tags-match-list-sublevels t)))
                ("h" "Habits" tags-todo "STYLE=\"habit\""
                 ((org-agenda-overriding-header "Habits")
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                (" " "Agenda"
                 ((agenda "" nil)
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-tags-match-list-sublevels 'indented)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-project-tasks)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                             ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-project-tasks)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED+WAITING|HOLD/!"
                             ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                    (if bh/hide-scheduled-and-waiting-next-tasks
                                                                        ""
                                                                      " (including WAITING and SCHEDULED tasks)")))
                              (org-agenda-skip-function 'bh/skip-non-tasks)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil))))
#+END_SRC

#+RESULTS:
| N | Notes  | tags|| ((org-agenda-overriding-header Notes) (org-tags-match-list-sublevels t))                                                |
| h | Habits | tags-todo                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             | STYLE="habit| ((org-agenda-overriding-header Habits) (org-agenda-sorting-strategy (quote (todo-state-down effort-up category-keep)))) |
|   | Agenda | ((agenda  nil) (tags REFILE ((org-agenda-overriding-header Tasks to Refile) (org-tags-match-list-sublevels nil))) (tags-todo -CANCELLED/!NEXT ((org-agenda-overriding-header (concat Project Next Tasks (if bh/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function (quote bh/skip-projects-and-habits-and-single-tasks)) (org-tags-match-list-sublevels t) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy (quote (todo-state-down effort-up category-keep))))) (tags-todo -HOLD-CANCELLED/! ((org-agenda-overriding-header Projects) (org-agenda-skip-function (quote bh/skip-non-projects)) (org-tags-match-list-sublevels (quote indented)) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -REFILE-CANCELLED-WAITING-HOLD/! ((org-agenda-overriding-header (concat Project Subtasks (if bh/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function (quote bh/skip-non-project-tasks)) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -REFILE-CANCELLED-WAITING-HOLD/! ((org-agenda-overriding-header (concat Standalone Tasks (if bh/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function (quote bh/skip-project-tasks)) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -CANCELLED/! ((org-agenda-overriding-header Stuck Projects) (org-agenda-skip-function (quote bh/skip-non-stuck-projects)) (org-agenda-sorting-strategy (quote (category-keep))))) (tags-todo -CANCELLED+WAITING | HOLD/! ((org-agenda-overriding-header (concat Waiting and Postponed Tasks (if bh/hide-scheduled-and-waiting-next-tasks   (including WAITING and SCHEDULED tasks)))) (org-agenda-skip-function (quote bh/skip-non-tasks)) (org-tags-match-list-sublevels nil) (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks) (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks))) (tags -REFILE/ ((org-agenda-overriding-header Tasks to Archive) (org-agenda-skip-function (quote bh/skip-non-archivable-tasks)) (org-tags-match-list-sublevels nil)))) | nil                                                                                                                     |

#+BEGIN_SRC emacs-lisp
  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))

  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))

  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))

  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun bh/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org- tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defun bh/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defvar bh/hide-scheduled-and-waiting-next-tasks t)

  (defun bh/toggle-next-task-display ()
    (interactive)
    (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

  (defun bh/skip-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  nil
                next-headline)) ; a stuck project, has subtasks but no next task
          nil))))

  (defun bh/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))

  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((bh/is-project-p)
              nil)
             ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
              nil)
             (t
              subtree-end))))
      (save-excursion (org-end-of-subtree t))))

  (defun bh/skip-non-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-task-p)
          nil)
         (t
          next-headline)))))

  (defun bh/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((and bh/hide-scheduled-and-waiting-next-tasks
               (member "WAITING" (org-get-tags-at)))
          next-headline)
         ((bh/is-project-p)
          next-headline)
         ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))

  (defun bh/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
  When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
  When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (bh/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-project-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         ((bh/is-project-subtree-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-project-tasks ()
    "Show project tasks.
  Skip project and sub-project tasks, habits, and loose non-project tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         ((not (bh/is-project-subtree-p))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (bh/is-subproject-p)
          nil
        next-headline)))

#+END_SRC

#+RESULTS:
: bh/skip-non-subprojects

*** =org-habit=

#+BEGIN_SRC emacs-lisp
  (require 'org-habit)
  (setq org-modules (quote (org-habit)))
  (setq org-habit-show-habits-only-for-today t)
  (setq org-habit-graph-column 45)
#+END_SRC

#+RESULTS:
: 45

*** FIXME =org-gcal=
** Refiling
Set a global ``refile`` org file as a staging area for new TODO items and basic settings to make refiling tasks easier. The code is based on the configuration in this [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][article]].

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file "/winc/jk/myLife/refile.org")  

  ; Include targets up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))

  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))

  ; Exclude DONE state tasks from refile targets
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))

  (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

*** Refiling hydra

#+BEGIN_SRC emacs-lisp
  (defun my/refile (file headline &optional arg)
    (let ((pos (save-excursion
                 (find-file file)
                 (org-find-exact-headline-in-buffer headline))))
      (org-refile arg nil (list headline file nil pos)))
    (switch-to-buffer (current-buffer)))

  (defhydra bh/org-refile-hydra (:foreign-keys run)
    "Refile"
    ("t" (my/refile "todo.org" "Refiled Tasks") "Refile to main TODO file")
    ("c" (my/refile "chalmers.org" "Administration") "Refile to NSERC USRA Administration")
    ("m" (my/refile "bom065.org" "Schedule") "Refile to BOM065 Course")
    ("s" (my/refile "vbb122.org" "Schedule") "Refile to VBB122 Course")
    ("u" (my/refile "uofa.org" "Administration") "UAlberta Tasks")
    ("j" org-refile-goto-last-stored "Jump to last refile")
    ("q" nil "cancel"))

    (global-set-key (kbd "<f9> r") 'bh/org-refile-hydra/body)
#+END_SRC

#+RESULTS:
: bh/org-refile-hydra/body

** Capturing
When a new task occurs and needs to be added, org-capture allows me to easily capture it.
I categorize it into a few new groups that I use as templates:
  + A new task (t)
  + A meeting (m)
  + A email I need to respond to (e)
  + A phone call (p)
  + A new note (n)
  + A interruption (i)
  + A new habit (h)
  + A org protocol (w)

#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
        (quote (("t" "todo" entry (file "/winc/jk/myLife/refile.org")
                 "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                ("e" "respond" entry (file "/winc/jk/myLife/refile.org")
                 "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t)
                ("n" "note" entry (file "/winc/jk/myLife/refile.org")
                 "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                ("i" "Journal" entry (file+datetree "/winc/jk/myLife/diary.org")
                 "* %?\n%U\n" :clock-in t :clock-resume t)
                ("w" "org-protocol" entry (file "/winc/jk/myLife/refile.org")
                 "* TODO Review %c\n%U\n" :immediate-finish t)
                ("m" "Meeting" entry (file "/winc/jk/myLife/refile.org")
                 "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                ("p" "Phone call" entry (file "/winc/jk/myLife/refile.org")
                 "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                ("h" "Habit" entry (file "/winc/jk/myLife/refile.org")
                "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

** Time clocking
*** Custom functions

#+BEGIN_SRC emacs-lisp
  (defun bh/clock-in-to-next (kw)
    "Switch a task from TODO to NEXT when clocking in.
  Skips capture tasks, projects, and subprojects.
  Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (bh/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (bh/is-project-p))
        "TODO"))))

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/clock-in-default-task ()
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))

  (defun bh/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in"
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when bh/keep-clock-running
              (bh/clock-in-default-task)))))))

  (defun bh/clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find bh/organization-task-id 'marker)
      (org-clock-in '(16))))

  (defun bh/clock-out-maybe ()
    (when (and bh/keep-clock-running
               (not org-clock-clocking-in)
               (marker-buffer org-clock-default-task)
               (not org-clock-resolving-clocks-due-to-idleness))
      (bh/clock-in-parent-task)))

  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

  (defun bh/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at (point))))
 
  (defun bh/punch-in (arg)
    "Start continuous clocking and set the default task to the selected task.  If no task is selected set the Organization task as the default task."
    (interactive "p")
    (setq bh/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;; We're in the agenda
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))
      ;; We are not in the agenda
      (save-restriction
        (widen)
        ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))))

  (defun bh/punch-out ()
    (interactive)
    (setq bh/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))
#+END_SRC

*** General configuration

#+BEGIN_SRC emacs-lisp
  (org-clock-persistence-insinuate) ;; resume clocking task when emacs restarts
  (setq org-clock-history-length 23) ;; show lots of clock history to make choosing easier
  (setq org-clock-in-resume t) ;; resume clocking task on clock-in if clock is open
  (setq org-clock-report-include-clocking-task t) ;; Include current clocking task in clock reports
  (setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))) ;; Clockreport time format
  (setq org-clock-in-switch-to-state 'bh/clock-in-to-next) ;; change state to next when clocking in
  (setq org-clock-into-drawer t) ;; log clocking information into drawers
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK"))) ;; set drawers
  (setq org-clock-out-remove-zero-time-clocks t)
  (setq org-clock-out-when-done t)
  (setq org-clock-persist t)
  (setq org-clock-persist-query-resume nil)
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  (setq bh/keep-clock-running nil)
  (defvar bh/organization-task-id "default")
  (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
#+END_SRC

*** Org clock convienence functionality

#+BEGIN_SRC emacs-lisp
  (use-package org-clock-convenience
    :diminish org-clock-convenience-mode
    :bind (:map org-agenda-mode-map
             ("<S-up>" . org-clock-convenience-timestamp-up)
             ("<S-down>" . org-clock-convenience-timestamp-down)
             ("o" . org-clock-convenience-fill-gap)
             ("e" . org-clock-convenience-fill-gap-both)))
#+END_SRC

#+RESULTS:
: org-clock-convenience-fill-gap-both

** Exporter configuration
*** Export backends

#+BEGIN_SRC emacs-lisp
  (setq org-export-backends '(ascii beamer html icalendar latex odt))
#+END_SRC

*** =latex=
**** LaTeX to PDF process

#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
    '("pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
      "bibtex %b" 
      "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f" 
      "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"))
#+END_SRC

**** LaTeX export settings

#+BEGIN_SRC emacs-lisp
  
#+END_SRC

**** LaTeX classes

#+BEGIN_SRC emacs-lisp
  (eval-after-load "ox-latex"
    ;; update the list of LaTeX classes and associated header (encoding, etc.) 
    ;; and structure
    '(add-to-list 'org-latex-classes
                  `("beamer"
                    ,(concat "\\documentclass[presentation]{beamer}\n"
                             "[DEFAULT-PACKAGES]"
                             "[PACKAGES]"
                             "[EXTRA]\n")
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+END_SRC

** Org-babel languages

#+BEGIN_SRC emacs-lisp
  (setq org-ditaa-jar-path "/home/jkoch/.emacs.d/dev-pkgs/ditaa0_9/ditaa0_9.jar")
  (org-babel-do-load-languages
   'org-babel-load-languages (quote ((emacs-lisp . t)
                                     (shell . t)
                                     (latex . t)
                                     (ditaa . t)
                                     (python . t)
                                     (ipython . t)
                                     (ledger . t))))
  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
#+END_SRC

** Preview =latex= in =org-mode=

#+BEGIN_SRC emacs-lisp
  (setq org-format-latex-options (plist-put org-format-latex-options :foreground "White"))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+END_SRC

** =org-indent=
   
#+BEGIN_SRC emacs-lisp
  (use-package org-indent
    :after org
    :ensure nil
    :diminish org-indent-mode
    :config
    (setq org-startup-indented t))
#+END_SRC

** =org-ref=

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :delight org-ref "ΩR"
    :init
    (require 'org-ref)
    (require 'doi-utils)
    (require 'org-ref-pdf)
    (setq org-ref-bibliography-notes "/winc/jk/work/NSERC_USRA/references/notes.org"
          org-ref-default-bibliography '("/winc/jk/work/NSERC_USRA/references/nserc_usra.bib")
          org-ref-pdf-directory "/winc/jk/work/NSERC_USRA/references/pdfs/")
    (setq bibtex-completion-pdf-open-function
      (lambda (fpath)
        (start-process "open" "*open*" "open" fpath)))
    :config
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-name-year-separator "_"
          bibtex-autokey-year-title-separator "_"
          bibtex-autokey-titleword-separator ""
          bibtex-autokey-titlewords 3
          bibtex-autokey-titlewords-stretch 1
          bibtex-autokey-titleword-length 5)
    ;; Helm-bibtex options
    (setq helm-bibtex-pdf-field "File")
    ; open pdf with system pdf viewer
    (setq helm-bibtex-pdf-open-function 'org-open-file)
    :bind (("H-j" . org-ref-bibtex-hydra/body)))
#+END_SRC

** =cdlatex-mode=

#+BEGIN_SRC emacs-lisp
  (use-package cdlatex
    :defer 1
    :diminish org-cdlatex-mode
    :config 
    (add-hook 'org-mode-hook 'turn-on-org-cdlatex))
#+END_SRC

** =org-tree-slide=

#+BEGIN_SRC emacs-lisp
  (use-package org-tree-slide
    :defer 5
    :diminish org-tree-slide-mode
    :bind (("<f11>" . org-tree-slide-mode)))
#+END_SRC
