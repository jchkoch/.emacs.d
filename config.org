#+TITLE: Emacs configuration
#+AUTHOR: J. C. Koch
#+EMAIL: jchkoch@gmail.com

* DONE Overview
** DONE Links to this document
| /HTML VERSION/ | [[https://jckoch.gitlab.com/dotemacs][jckoch.gitlab.com/dotemacs]] |
| /GIT REPO/     | [[https://gitlab.com/jckoch/.emacs.d][gitlab.com/jckoch/.emacs.d]] |
** DONE What is this?
This document contains the majority of my configurations for GNU Emacs and is known in this document as ~config.org~.
It is designed using the principle of "literate programming" which combines the written language and inline code blocks.
Emacs knows how to only evaluate the ~elisp~ (Emacs Lisp) code included herein while the written language is for humans to better understand the code and the underlying rationale of the developer.

Literate programming has the advantage of being more deliberate and explanatory than terse ~elisp~ scripts.
This makes it useful for the purposes of sharing knowledge to all users of varying level of experience.
This document itself is written in ~org-mode~ and contains all /package configurations/ for my Emacs setup.
** DONE How to use this document?
This document assumes that a user has a basic familiarity with ~Emacs~ and specifically ~org-mode~.
However, both novice and experienced users of ~Emacs~ should be able to find beneficial and practical uses of the present document.
As with all things ~Emacs~, the user is encouraged to customise their configuration to suit their purposes.
Therefore, it is encouraged that the user picks and chooses the ~elisp~ code presented herein which most appeals to them, discarding the rest which does not suit them.
Two approaches can be used to pick and choose which you would like to keep and which to discard:
1. Delete all the ~elisp~ code you do not want.
2. Insert the code ~:disabled~ within the ~use-package pkg-name~ declarations or in instances where ~use-package~ is not used simply comment out the ~elisp~ code.
This document and relevant additional files are available in a version controlled git repository for all to load into ~Emacs~.
** DONE Where I run Emacs?
My OS of choice is openSUSE Leap distribution of GNU/Linux.
My Emacs is pre-packaged from my operating system.
I decided to utilize the distribution provided Emacs package for the stability that is associated with not tracking the bleeding edge version contained in the Emacs source repository.
I am not a software developer but engineer and it is important to me to have tools which consistently and reliably work.

Full cross-platform compatibility and portability is *not* guaranteed by my configuration.
I do, nonetheless, try to provide comments and suggestions for alternatives when needed to account for differences when using other operating systems.

** DONE Note about my methodology
My methodology is such that new configurations and packages only make their way into this document after maturing (if they are still present) in my own workflow for a few months.
The specific timing can vary drastically depending on the number of new things I discover in Emacs at any given time and how busy I am with other work.
Nonetheless, I try to keep this document (and thus my configuration) up to date with recent trends in Emacs possibilities and workflows from a variety of sources mostly more experienced Emacs users.
** DONE Sources of Emacs wisdom
Many of the configurations within this document are inspired or taken from other (more experienced) users of Emacs who have also shared their own dotemacs configurations.
I use ~use-package~ developed by [[http://www.newartisans.com][John Wiegley]] ([[https://github.com/jwiegley/dot-emacs/][=jwiegley= dotemacs]]) to configure all my other packages used herein.
A significant majority of the configurations within this document are based on the configurations of [[http://doc.norang.ca/org-mode.html][Bernt Hansen]], [[https://protesilaos.com/dotemacs/#h:9ff13b78-42b8-49fe-9e23-0307c780de93][Protesilaous Stavrou]], [[http://kitchingroup.cheme.cmu.edu/][John Kitchin]], and [[https://github.com/gregsexton][Greg Sexton]].
Many thanks to them for their incredible work!
** DONE COPYING
Copyright (c) 2020 James Koch <jchkoch@gmail.com>

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; version 2
of the License.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, see <https://www.gnu.org/licenses/>.
* DONE Base settings
** DONE Disable GUI components
Since I normally use the GUI variant of Emacs and yet I also prefer not to have any of the GUI elements that come with Emacs out-of-the-box.
The only element which remains is the modeline which, of course, is not part of the GUI anyway...
Additionally, the pair of keybindings to minimise and suspend the frame are disabled since I rarely minimise applications instead relying heavily on virtual desktops instead.
A last note is that I disable the "hello file" function because it seems to be very slow to open in Emacs on my GNU/Linux system.

#+begin_src emacs-lisp
  (use-package emacs
    :init
    (menu-bar-mode -1)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1)
    :config
    (setq use-file-dialog nil)
    (setq use-dialog-box t)            ; only for mouse events
    (setq inhibit-splash-screen t)
    (defalias 'yes-or-no-p 'y-or-n-p)
    (global-visual-line-mode 1)        ; 1=visual line mode on everywhere; 0=visual line mode off
    (global-linum-mode 0)              ; 1=turn on line numbers everywhere; 0=no line numbers by default
    (global-unset-key (kbd "C-z"))
    (global-unset-key (kbd "C-x C-z"))
    (global-unset-key (kbd "C-h h")))
#+end_src

** DONE Always rebuild init
When Emacs expands this ~org-mode~ file into the actual ~elisp~ code, it tangles (i.e. combines) all the code blocks from ~config.org~ into a new file ~config.el~.
Emacs then loads this new file when launched with the customisations in the state when this new file, ~config.el~, was written.
Any updates requires a rewrite of ~config.el~.
Thus, to ensure older settings are not loaded, the derived file is deleted when I instruct Emacs to terminate its process.
Thereby ensuring that at the next launch of Emacs, new customisations are parsed and included as a part of my configuration.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (defun jk/delete-emacs-init ()
      (interactive)
      (let ((configs "~/.emacs.d/config.el"))
        (when configs
          (delete-file configs))))
    (defun jk/delete-emacs-custom-init()
      (interactive)
      (let ((configs "~/.emacs.d/custom.el"))
        (when configs
          (delete-file configs))))
    :hook ((kill-emacs . jk/delete-emacs-init)
           (kill-emacs . jk/delete-emacs-custom-init)))
#+end_src

** DONE Edit mode line names
In Emacs, depending on what type of file you visit or special buffers different modes may be active.
The name of the modes, active in any buffer, are shown on the modeline.
It is often convenient to alter the mode name shown to simplify the information presented on the modeline itself.

With this package, we can easily edit or rename the mode names (even altogether hiding the mode name) on the modeline.
Any package declaration with ~use-package~ that uses the ~:delight~ keyword will rename what appears on the modeline should that package be active for any current buffer.

#+begin_src emacs-lisp
  (use-package delight
    :ensure t
    :after use-package)
#+end_src

** DONE Custom.el
When you install a package or use various customisation interfaces to adjust values to suit your needs, Emacs will append a piece of ~elisp~ code to your init file.
To maintain a clean and organized configuration, I prefer to have these automatically included pieces of ~elisp~ code to be contained in a separate file.

#+begin_src emacs-lisp
  (use-package cus-edit
    :config
    (setq custom-file "~/.emacs.d/custom.el")

    (unless (file-exists-p custom-file)
            (write-region "" nil custom-file))

    (load custom-file))
#+end_src

** DONE Mode line

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq mode-line-percent-position '(-3 "%p"))
    (setq mode-line-defining-kbd-macro
          (propertize " Macro" 'face 'mode-line-emphasis))
    (setq-default mode-line-format
                  '("%e"
                    mode-line-front-space
                    mode-line-mule-info
                    mode-line-client
                    mode-line-modified
                    mode-line-remote
                    mode-line-frame-identification
                    mode-line-buffer-identification
                    "  "
                    (vc-mode vc-mode)
                    " "
                    mode-line-position
                    " "
                    mode-line-modes
                    "  "
                    mode-line-misc-info
                    mode-line-end-spaces)))
#+end_src

*** DONE Battery status
As my primary computer where I use Emacs is a laptop, it is convenient to include the battery status in the mode line. The following code is attributed to [[https://protesilaos.com/dotemacs/#h:9ff13b78-42b8-49fe-9e23-0307c780de93][Protesilaous Stavrou]] who writes:

 #+begin_quote
    Emacs offers a built-in library for presenting information about the status of the laptop's battery. Using it allows me to eliminate my dependence on the system panel and thus keep Emacs in full screen view without any interruptions.

    The default update interval is set to a single minute (in seconds), which is generally fine though I find that a slightly higher value works just as well. As for the format, it is designed to show a context-dependent, single character indicator about the current status, as well as the battery's overall percentage.

    Variable battery-mode-line-limit will hide the indicator if the value is above the declared threshold. 99 basically means "full". I use that instead of a 100 because sometimes the battery only ever fills up to 99.99, meaning that the indicator remains present at all times.
 #+end_quote

 #+begin_src emacs-lisp
   (use-package battery
     :config
     (setq battery-mode-line-format " [%b%p%%] ")
     (setq battery-mode-line-limit 99)
     (setq battery-update-interval 180)
     (setq battery-load-low 20)
     (setq battery-load-critical 10)
     :hook (after-init . display-battery-mode))
 #+end_src

*** DONE Display the current time
Adjust the format of how the current time of day is displayed on the mode line.
I use the 24h clock and like to also know the date.
For the date I use the typical European format of "%Y-%M-%D".

 #+begin_src emacs-lisp
   (use-package time
     :config
     (setq display-time-format "%Y-%M-%D  %H:%M")
     ;;;; Covered by `display-time-format'
     ;; (setq display-time-24hr-format t)
     ;; (setq display-time-day-and-date t)
     (setq display-time-interval 60)
     (setq display-time-mail-string "")
     (setq display-time-default-load-average nil)
     :hook (after-init . display-time-mode))
 #+end_src

** DONE Keycast mode
To quote [[https://protesilaos.com/dotemacs/#h:9ff13b78-42b8-49fe-9e23-0307c780de93][Protesilaous Stavrou]]:

#+begin_quote
  Once enabled, this package uses the mode line to show the keys being pressed and the command they call. It is quite useful for screen casting.
#+end_quote

#+begin_src emacs-lisp
  (use-package moody
    :ensure t)

  (use-package keycast
    :ensure t
    :after moody
    :commands keycast-mode
    :config
    (setq keycast-window-predicate 'moody-window-active-p)
    (setq keycast-separator-width 1)
    (setq keycast-insert-after 'mode-line-end-spaces)
    (setq keycast-remove-tail-elements nil))
#+end_src

#+RESULTS:
: t

** DONE Fringe mode
The fringe areas are to the right and left side of the Emacs frame. As [[https://protesilaos.com/dotemacs/#h:9ff13b78-42b8-49fe-9e23-0307c780de93][Protesilaous Stavrou]] explains:

#+begin_quote
  They can be used to show status-related or contextual feedback such as line truncation indicators, continuation lines, code linting markers, etc.
#+end_quote

#+begin_src emacs-lisp
  (use-package fringe
    :config
    (fringe-mode '(8 . 8))                          ; pixels
    (setq-default fringes-outside-margins nil)
    (setq-default indicate-buffer-boundaries nil)
    (setq-default indicate-empty-lines nil)
    (setq-default overflow-newline-into-fringe t))
#+end_src

#+RESULTS:
: t

** DONE Diff highlights in the left fringe                 :disabled:
The ~diff-hl~ package uses either fringe area to display changes in the current buffer if the file in the buffer is under version control.
This is a new package to me so I am still experimenting with it. I don't really like it. I find it too distracting from the editing or creation of content. I find myself being drawn to git and the depths of branching, merging, and re-basing instead of creating new content.

#+begin_src emacs-lisp
  (use-package diff-hl
    :disabled
    :ensure t
    :config
    (setq diff-hl-draw-borders nil)
    (setq diff-hl-side 'left)
   :hook ((after-init . global-diff-hl-mode)))
#+end_src

#+RESULTS:

** DONE Toggle for line numbers and whitespace indicators
1. Display line numbers
   For the most part, I do not use these manual toggle very often; however, there are occasions where I want line numbers in a mode which I do not by default add line numbers.
   For these cases, I have these function to toggle line numbers on for a local buffer.
2. Display invisible characters (whitespace)
   Viewing whitespace is sometimes helpful to debug prose which is exported via \LaTeX to PDF documents or web pages.
   Mostly, this is kept inactive.

#+begin_src emacs-lisp
  (use-package emacs
    :config
    (defun jk/toggle-invisibles ()
      "Toggles the display of indentation and space characters."
      (interactive)
      (if (bound-and-true-p whitespace-mode)
          (whitespace-mode -1)
        (whitespace-mode)))

    (defun jk/toggle-line-numbers ()
      "Toggles the display of line numbers.  Applies to all buffers."
      (interactive)
      (if (bound-and-true-p display-line-numbers-mode)
          (display-line-numbers-mode -1)
        (display-line-numbers-mode)))

    :bind ("<f3>" . jk/toggle-line-numbers)
    :commands jk/toggle-invisibles)
#+end_src

* DONE Personal and security settings           :user_config_required:
The two setting configured here are personal to each user using this configuration and therefore must be configured by each user uniquely.
Personal user information is loaded through the file ~personal.org~.

#+begin_src emacs-lisp
  (org-babel-load-file (expand-file-name "~/.emacs.d/personal.org"))
#+end_src

** DONE Authenticate source
Package to remove sensitive data from this configuration to allow sharing on GitHub.
This package is primarily needed to allow access to my passwords stored in the standard UNIX password manager which uses GPG encryption.

#+begin_src emacs-lisp
  (use-package auth-source
    :config
    (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo")))
#+end_src

* DONE Complete framework and extras
** DONE Ivy mode
#+BEGIN_QUOTE
Ivy is an interactive interface for completion in Emacs. Emacs uses completion mechanism in a variety of contexts: code, menus, commands, variables, functions, etc. Completion entails listing, sorting, filtering, previewing, and applying actions on selected items. When active, ivy-mode completes the selection process by narrowing available choices while previewing in the minibuffer. Selecting the final candidate is either through simple keyboard character inputs or through powerful regular expressions.

-taken from Ivy User Manual Copyright (C) 2015-2018 Free Software Foundation, Inc.
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
  (use-package ivy
    :delight
    :init (ivy-mode 1)
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :config
    (setq ivy-count-format "%d/%d")
    (setq ivy-use-virtual-buffers t)
    (setq org-refile-use-outline-path 'file
          org-outline-path-complete-in-steps nil))
#+END_SRC

** DONE Ivy pass
Ivy-pass is an interactive interface for password completion in Emacs for the Standard Unix Password Store. Ivy-pass uses the completion mechanism from Ivy for password completion.

#+BEGIN_SRC emacs-lisp
  (use-package ivy-pass
    :after ivy
    :delight
    :bind (("C-c p p" . ivy-pass)
           ("C-c p f" . password-store-copy-field)
           ("C-c p p" . password-store-copy))
    :commands ivy-pass)
#+END_SRC

* DONE General interface and interactions
This section contains configurations for aspects of the Emacs user interface.

** DONE Language settings for prose and code
*** DONE Recognize sub-words

#+begin_src emacs-lisp
  (use-package subword
    :delight
    :commands subword-mode
    :hook (prog-mode-hook . subword-mode))
#+end_src

*** DONE Flyspell (spell check)
I need spell checking for both English and German. Enable Flyspell Mode.
If you keep your spell check personal dictionary in particular location, change this variable as desired.
Some of this configuration is taken from Joel Kuiper (https://joelkuiper.eu/spellcheck_emacs) and some more from [[https://protesilaos.com/dotemacs/#h:9ff13b78-42b8-49fe-9e23-0307c780de93][Protesilaous Stavrou]] including a user-defined function to easily switch using different dictionaries for different languages.

Note: Using =aspell= as the dictionary will not work on Windows anymore as there is *no Windows binary* which works with Emacs 26.1 and greater, therefore best practice is to switch to using =hunspell=.
See link on how to do this for Windows [[https://lists.gnu.org/archive/html/help-gnu-emacs/2014-04/msg00030.html][here]] and for Linux simply go to your distribution and install it there.
On GNU/Linux most likely you need to download extra dictionaries from [[https://github.com/wooorm/dictionaries][this link]] like for the German language.

#+begin_src emacs-lisp
  (setenv "DICPATH"
          "/usr/share/hunspell")
#+end_src

#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :delight
    :commands (ispell-change-dictionary
               ispell-word
               flyspell-buffer
               flyspell-mode
               flyspell-region)
    :config
    (setq flyspell-issue-message-flag nil)
    (setq flyspell-issue-welcome-flag nil)

    (when (executable-find "hunspell")
      (setq-default ispell-program-name "hunspell")
      (setq ispell-really-hunspell t))
    (setq ispell-dictionary "en_CA-large")
    (setq ispell-personal-dictionary (concat user-emacs-directory ".ispell"))

    (dolist (hook '(text-mode-hook))
       (add-hook hook (lambda () (flyspell-mode 1))))
    (dolist (mode '(emacs-lisp-mode-hook
                    python-mode-hook
                    R-mode-hook))
      (add-hook mode (lambda () (flyspell-prog-mode))))

    (defun flyspell-check-next-highlighted-word ()
      "Custom function to spell check next highlighted word"
      (interactive)
      (flyspell-goto-next-error)
      (ispell-word))

    (defun jk/ispell-toggle-dictionaries ()
      "Toggle between English and German dictionaries."
      (interactive)
      (if (string= ispell-current-dictionary "en_CA-large")
          (ispell-change-dictionary "de_DE")
        (ispell-change-dictionary "en_CA-large")))

    :bind (("<f8>" . ispell-word)
           ("M-<f8>" . jk/ispell-toggle-dictionaries)))
#+END_SRC

*** DONE Flycheck (code linting)

#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :delight
    :commands flycheck-mode
    :config
    (setq flycheck-check-syntax-automatically
          '(save mode-enabled)))
#+end_src

Also, a Flycheck indicator in the mode line.

#+begin_src emacs-lisp
  (use-package flycheck-indicator
    :ensure t
    :delight
    :after flycheck
    :hook (flycheck-mode . flycheck-indicator-mode))
#+end_src

*** DONE Markdown support

#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("\\.md\\'" . markdown-mode))
#+end_src

*** DONE Parentheses
Enable parentheses matching.
Extremely useful for writing ~elisp~ code and \LaTeX equations.

#+begin_src emacs-lisp
  (use-package parens
    :delight
    :config
    (setq show-paren-style 'paranthesis)
    (setq show-paren-when-point-in-periphery t)
    (setq show-paren-when-point-inside-paren nil)
    :hook (after-init . show-paren-mode))
#+end_src

*** DONE Tabs, indentation, and the TAB key
As I fan of the Python programming language as well as Emacs, I believe strongly in tabs (i.e. in the sense of the tab character) when dealing with text files and indenting code.
However, as [[https://protesilaos.com/dotemacs/#h:9ff13b78-42b8-49fe-9e23-0307c780de93][Protesilaous Stavrou]] notes:

#+begin_quote
  ..., I understand that elisp uses its own approach, which I do not want to interfere with. Also, Emacs tends to perform alignments by mixing tabs with spaces, which can actually lead to misalignments depending on certain variables such as the size of the tab. As such, I am disabling tabs by default.

  If there ever is a need to use different settings in other modes, we can customise them via hooks. This is not an issue I have encountered yet and am therefore refraining from solving a problem that does not affect me.
#+end_quote


#+begin_src emacs-lisp
  (use-package emacs
    :config
    (setq-default tab-always-indent t)
    (setq-default tab-width 4)
    (setq-default indent-tabs-mode nil))
#+end_src

*** DONE Delete trailing whitespace
#+begin_quote
  This always creates unnecessary diffs in git. Just delete it upon saving.
#+end_quote

#+begin_src emacs-lisp
  (use-package emacs
    :hook (before-save . delete-trailing-whitespace))
#+end_src

** TODO Coding settings and completions
*** NEXT Python mode

#+begin_src emacs-lisp
  (use-package python-mode 
    :delight python-mode "PI"
    :mode "\\.py\\'"
    :init (setq python-shell-interpreter "python3"))
#+end_src

#+begin_src emacs-lisp
  (defun set-exec-path-from-shell-PATH ()
    "Set up Emacs' `exec-path' and PATH environment variable to match 
     that used by the user's shell.
     This is particularly useful under Mac OS X and macOS, where GUI
     apps are not started from a shell."
  
    (interactive)
    (let ((path-from-shell (replace-regexp-in-string
                            "[ \t\n]*$" "" (shell-command-to-string
                                            "$SHELL --login -c 'echo $PATH'"
                                            ))))
      (setenv "PATH" path-from-shell)
      (setq exec-path (split-string path-from-shell path-separator))))
  
  (set-exec-path-from-shell-PATH)
#+end_src

*** TODO elpy-mode                                        :disabled:

#+begin_src emacs-lisp
  ;; (use-package elpy
  ;;   :ensure t
  ;;   :init (elpy-enable)
  ;;         (setq elpy-rpc-python-command "python3"))
#+end_src

* DONE Applications and utilities
** DONE Org-Mode (getting things done)
To quote [[http://orgmode.org/][Carsten Dominik]],

#+BEGIN_QUOTE
Org mode is for keeping notes, maintaining TODO lists, planning projects, and
authoring documents with a fast and effective plain-text system.
#+END_QUOTE

*** DONE Org basic configurations

#+begin_src emacs-lisp
  (use-package org
    :ensure org-contrib
    :init
    (defun bh/verify-refile-target ()
      "Exclude todo keywords with a done state from refile targets"
      (not (member (nth 2 (org-heading-components)) org-done-keywords)))
    :config
    ;; open org files folded
    (setq org-startup-folded t)
    ;; src blk templates
    (setq org-structure-template-alist
          '(("s" . "src")
            ("x" . "export latex")
            ("E" . "src emacs-lisp")
            ("e" . "example")
            ("q" . "quote")
            ("V" . "verbatim")
            ("p" . "src python")
            ("ipy" . "src ipython :session :results output drawer")))
    ;; refile, todo
    (setq org-default-notes-file (concat default-directory "refile.org"))
    (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                     (org-agenda-files :maxlevel . 9))))
    (setq org-refile-allow-creating-parent-nodes (quote confirm))
    (setq org-refile-target-verify-function 'bh/verify-refile-target)
    ;; code blocks
    (setq org-confirm-babel-evaluate nil)
    ;; preview latex equations
    (setq org-format-latex-options (plist-put org-format-latex-options :foreground "White"))
    (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    ;; get extra functionality (ignore headlines but export content)
    (require 'ox-extra)
    (ox-extras-activate '(ignore-headlines))
    :bind (("C-c l" . org-insert-link)
           ("C-o" . org-open-at-point)
           ("<f9> I" . bh/punch-in)
           ("<f9> O" . bh/punch-out)
           ("<f9> SPC" . bh/clock-in-last-task)
           ("C-c d" . org-decrypt-entry)))
#+end_src

*** DONE Org-todo states

 #+begin_src emacs-lisp
   (use-package org
     :config
     (setq org-todo-keywords
           '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)" "REVIEW(r)")
             (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING")))

     (setq org-todo-keyword-faces
           '(("TODO" :foreground "#ff6666" :weight bold)
             ("NEXT" :foreground "#6666ff" :weight bold)
             ("DONE" :foreground "#32cd32" :weight bold)
             ("REVIEW" :foreground "#ff0000" :weight bold)
             ("WAITING" :foreground "#ffc966" :weight bold)
             ("HOLD" :foreground "#ff66ff" :weight bold)
             ("CANCELLED" :foreground "#32cd32" :weight bold)
             ("MEETING" :foreground "#32cd32" :weight bold)
             ("PHONE" :foreground "#32cd32" :weight bold)))

     (setq org-use-fast-todo-selection t))
 #+end_src

*** DONE Org-tag configuration

 #+begin_src emacs-lisp
   (use-package org
     :config
     (setq org-todo-state-tags-triggers                              ; TODO state tag triggers
           (quote (("CANCELLED" ("CANCELLED" . t))
                   ("WAITING" ("WAITING" . t))
                   ("HOLD" ("WAITING") ("HOLD" . t))
                   (done ("WAITING") ("HOLD"))
                   ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                   ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                   ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

     (setq org-tags-column -70))                                     ; Tag placement
 #+end_src

*** DONE Org indent

 #+begin_src emacs-lisp
   (use-package org-indent
     :after org
     :delight
     :config
     (setq org-startup-indented t))
 #+end_src

*** DONE Org-capture templates
When a new task occurs and needs to be added, org-capture allows me to easily capture it.
I categorize it into a few new groups that I use as templates:
+ A new task (t)
+ A meeting (m)
+ A email I need to respond to (e)
+ A phone call (p)
+ A new note (n)
+ A interruption (i)
+ A new habit (h)
+ A org protocol (w)

#+begin_src emacs-lisp
  (use-package org-capture
    :config
    (setq org-capture-templates
          (quote (("t" "todo" entry (file "refile.org")
                   "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
                  ("e" "respond" entry (file "refile.org")
                   "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t)
                  ("n" "note" entry (file "refile.org")
                   "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
                  ("i" "Journal" entry (file+datetree "diary.org")
                   "* %?\n%U\n" :clock-in t :clock-resume t)
                  ("w" "org-protocol" entry (file "refile.org")
                   "* TODO Review %c\n%U\n" :immediate-finish t)
                  ("m" "Meeting" entry (file "refile.org")
                   "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
                  ("p" "Phone call" entry (file "refile.org")
                   "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
                  ("h" "Habit" entry (file "refile.org")
                   "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
    :bind ("C-c c" . org-capture))
#+end_src

*** DONE Org agenda
**** DONE Custom agenda functions
Many thanks to [[http://doc.norang.ca/org-mode.html][Bernt Hansen]] for sharing his dotemacs configuration online.
His agenda view customisations are pure Emacs gold.

#+BEGIN_SRC emacs-lisp
  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/is-project-p ()
    "Any task with a todo keyword subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task has-subtask))))

  (defun bh/is-project-subtree-p ()
    "Any task with a todo keyword that is in a project subtree.
  Callers of this function already widen the buffer view."
    (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                                (point))))
      (save-excursion
        (bh/find-project-task)
        (if (equal (point) task)
            nil
          t))))

  (defun bh/is-task-p ()
    "Any task with a todo keyword and no subtask"
    (save-restriction
      (widen)
      (let ((has-subtask)
            (subtree-end (save-excursion (org-end-of-subtree t)))
            (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
        (save-excursion
          (forward-line 1)
          (while (and (not has-subtask)
                      (< (point) subtree-end)
                      (re-search-forward "^\*+ " subtree-end t))
            (when (member (org-get-todo-state) org-todo-keywords-1)
              (setq has-subtask t))))
        (and is-a-task (not has-subtask)))))

  (defun bh/is-subproject-p ()
    "Any task which is a subtask of another project"
    (let ((is-subproject)
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (while (and (not is-subproject) (org-up-heading-safe))
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq is-subproject t))))
      (and is-a-task is-subproject)))

  (defun bh/list-sublevels-for-projects-indented ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org- tags-match-list-sublevels 'indented)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defun bh/list-sublevels-for-projects ()
    "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
    This is normally used by skipping functions where this variable is already local to the agenda."
    (if (marker-buffer org-agenda-restrict-begin)
        (setq org-tags-match-list-sublevels t)
      (setq org-tags-match-list-sublevels nil))
    nil)

  (defvar bh/hide-scheduled-and-waiting-next-tasks t)

  (defun bh/toggle-next-task-display ()
    (interactive)
    (setq bh/hide-scheduled-and-waiting-next-tasks (not bh/hide-scheduled-and-waiting-next-tasks))
    (when  (equal major-mode 'org-agenda-mode)
      (org-agenda-redo))
    (message "%s WAITING and SCHEDULED NEXT Tasks" (if bh/hide-scheduled-and-waiting-next-tasks "Hide" "Show")))

  (defun bh/skip-stuck-projects ()
    "Skip trees that are not stuck projects"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  nil
                next-headline)) ; a stuck project, has subtasks but no next task
          nil))))

  (defun bh/skip-non-stuck-projects ()
    "Skip trees that are not stuck projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (if (bh/is-project-p)
            (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                   (has-next ))
              (save-excursion
                (forward-line 1)
                (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                  (unless (member "WAITING" (org-get-tags-at))
                    (setq has-next t))))
              (if has-next
                  next-headline
                nil)) ; a stuck project, has subtasks but no next task
          next-headline))))

  (defun bh/skip-non-projects ()
    "Skip trees that are not projects"
    ;; (bh/list-sublevels-for-projects-indented)
    (if (save-excursion (bh/skip-non-stuck-projects))
        (save-restriction
          (widen)
          (let ((subtree-end (save-excursion (org-end-of-subtree t))))
            (cond
             ((bh/is-project-p)
              nil)
             ((and (bh/is-project-subtree-p) (not (bh/is-task-p)))
              nil)
             (t
              subtree-end))))
      (save-excursion (org-end-of-subtree t))))

  (defun bh/skip-non-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-task-p)
          nil)
         (t
          next-headline)))))

  (defun bh/skip-project-trees-and-habits ()
    "Skip trees that are projects"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits-and-single-tasks ()
    "Skip trees that are projects, tasks that are habits, single non-project tasks"
    (save-restriction
      (widen)
      (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((org-is-habit-p)
          next-headline)
         ((and bh/hide-scheduled-and-waiting-next-tasks
               (member "WAITING" (org-get-tags-at)))
          next-headline)
         ((bh/is-project-p)
          next-headline)
         ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
          next-headline)
         (t
          nil)))))

  (defun bh/skip-project-tasks-maybe ()
    "Show tasks related to the current restriction.
  When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
  When not restricted, skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max))))
             (limit-to-project (marker-buffer org-agenda-restrict-begin)))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (not limit-to-project)
               (bh/is-project-subtree-p))
          subtree-end)
         ((and limit-to-project
               (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-project-tasks ()
    "Show non-project tasks.
  Skip project and sub-project tasks, habits, and project related tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         ((bh/is-project-subtree-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-project-tasks ()
    "Show project tasks.
  Skip project and sub-project tasks, habits, and loose non-project tasks."
    (save-restriction
      (widen)
      (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
             (next-headline (save-excursion (or (outline-next-heading) (point-max)))))
        (cond
         ((bh/is-project-p)
          next-headline)
         ((org-is-habit-p)
          subtree-end)
         ((and (bh/is-project-subtree-p)
               (member (org-get-todo-state) (list "NEXT")))
          subtree-end)
         ((not (bh/is-project-subtree-p))
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-projects-and-habits ()
    "Skip trees that are projects and tasks that are habits"
    (save-restriction
      (widen)
      (let ((subtree-end (save-excursion (org-end-of-subtree t))))
        (cond
         ((bh/is-project-p)
          subtree-end)
         ((org-is-habit-p)
          subtree-end)
         (t
          nil)))))

  (defun bh/skip-non-subprojects ()
    "Skip trees that are not projects"
    (let ((next-headline (save-excursion (outline-next-heading))))
      (if (bh/is-subproject-p)
          nil
        next-headline)))

#+END_SRC

#+RESULTS:
: bh/skip-non-subprojects

**** DONE Org habits

#+begin_src emacs-lisp
  (use-package org-habit
    :after org
    :delight)
#+end_src

**** DONE Org agenda custom commands

#+begin_src emacs-lisp
  (use-package org-agenda
    :after org-habit
    :config
    (setq org-agenda-files (list default-directory))
    (setq org-agenda-span 'day)
    (setq org-agenda-use-time-grid t)
    (setq org-agenda-diary-file (concat default-directory "diary.org"))

    (setq org-modules (quote (org-habit)))
    (setq org-habit-show-habits-only-for-today t)
    (setq org-habit-graph-column 45)

    (setq org-agenda-custom-commands
          (quote (("N" "Notes" tags "NOTE"
                   ((org-agenda-overriding-header "Notes")
                    (org-tags-match-list-sublevels t)))
                  ("h" "Habits" tags-todo "STYLE=\"habit\""
                   ((org-agenda-overriding-header "Habits")
                    (org-agenda-sorting-strategy
                     '(todo-state-down effort-up category-keep))))
                  ("a" "Agenda"
                   ((agenda "" nil)
                    (tags "REFILE"
                          ((org-agenda-overriding-header "Tasks to Refile")
                           (org-tags-match-list-sublevels nil)))
                    (tags-todo "-CANCELLED/!NEXT"
                               ((org-agenda-overriding-header (concat "Project Next Tasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                                (org-tags-match-list-sublevels t)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(todo-state-down effort-up category-keep))))
                    (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                               ((org-agenda-overriding-header (concat "Standalone Tasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-project-tasks)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-HOLD-CANCELLED/!"
                               ((org-agenda-overriding-header "Projects")
                                (org-agenda-skip-function 'bh/skip-non-projects)
                                (org-tags-match-list-sublevels 'indented)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-REFILE-CANCELLED-WAITING-HOLD/!"
                               ((org-agenda-overriding-header (concat "Project Subtasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-non-project-tasks)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED/!"
                               ((org-agenda-overriding-header "Stuck Projects")
                                (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                                (org-agenda-sorting-strategy
                                 '(category-keep))))
                    (tags-todo "-CANCELLED+WAITING|HOLD/!"
                               ((org-agenda-overriding-header (concat "Waiting and Postponed Tasks"
                                                                      (if bh/hide-scheduled-and-waiting-next-tasks
                                                                          ""
                                                                        " (including WAITING and SCHEDULED tasks)")))
                                (org-agenda-skip-function 'bh/skip-non-tasks)
                                (org-tags-match-list-sublevels nil)
                                (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                                (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)))
                    (tags "-REFILE/"
                          ((org-agenda-overriding-header "Tasks to Archive")
                           (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                           (org-tags-match-list-sublevels nil))))
                   nil))))

    :hook ((org-agenda-mode . visual-line-mode))
    :bind (("<f10>" . org-agenda)
           ("C-x h" . org-habit-toggle-habits)
           ("C-c C-x F" . org-agenda-file-to-front)
           ("C-c C-x r" . org-remove-file)))
#+end_src

*** DONE Org time clocking
**** DONE Custom clocking functions
Many thanks to [[http://doc.norang.ca/org-mode.html][Bernt Hansen]] for sharing his dotemacs configuration online.
His agenda view customisations are pure Emacs gold.

#+BEGIN_SRC emacs-lisp
  (defun bh/clock-in-to-next (kw)
    "Switch a task from TODO to NEXT when clocking in.
  Skips capture tasks, projects, and subprojects.
  Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (bh/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (bh/is-project-p))
        "TODO"))))

  (defun bh/find-project-task ()
    "Move point to the parent (project) task if any"
    (save-restriction
      (widen)
      (let ((parent-task (save-excursion (org-back-to-heading 'invisible-ok) (point))))
        (while (org-up-heading-safe)
          (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
            (setq parent-task (point))))
        (goto-char parent-task)
        parent-task)))

  (defun bh/clock-in-default-task ()
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))

  (defun bh/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in"
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when bh/keep-clock-running
              (bh/clock-in-default-task)))))))

  (defun bh/clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find bh/organization-task-id 'marker)
      (org-clock-in '(16))))

  (defun bh/clock-out-maybe ()
    (when (and bh/keep-clock-running
               (not org-clock-clocking-in)
               (marker-buffer org-clock-default-task)
               (not org-clock-resolving-clocks-due-to-idleness))
      (bh/clock-in-parent-task)))

  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)

  (defun bh/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at (point))))

  (defun bh/punch-in (arg)
    "Start continuous clocking and set the default task to the selected task.  If no task is selected set the Organization task as the default task."
    (interactive "p")
    (setq bh/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;; We're in the agenda
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))
      ;; We are not in the agenda
      (save-restriction
        (widen)
        ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))))

  (defun bh/punch-out ()
    (interactive)
    (setq bh/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))
#+END_SRC

**** DONE Org time clocking configuration

#+begin_src emacs-lisp
  (use-package org-clock
    :config
    (org-clock-persistence-insinuate)                  ; resume clocking task when emacs restarts
    (setq org-clock-history-length 23)                 ; show lots of clock history to make choosing easier
    (setq org-clock-in-resume t)
    (setq org-clock-report-include-clocking-task t)    ; Include current clocking task in clock reports
    (setq org-time-clocksum-format                     ; Clockreport time format
          (quote (:hours "%d"
                  :require-hours t
                  :minutes ":%02d"
                  :require-minutes t)))
    (setq org-clock-in-switch-to-state                  ; change state to next when clocking in
          'bh/clock-in-to-next)
    (setq org-clock-into-drawer t)                      ; log clocking information into drawers
    (setq org-drawers (quote ("PROPERTIES" "LOGBOOK"))) ; set drawers
    (setq org-clock-out-remove-zero-time-clocks t)
    (setq org-clock-out-when-done t)
    (setq org-clock-persist t)
    (setq org-clock-persist-query-resume nil)
    (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
    (setq bh/keep-clock-running nil)
    (defvar bh/organization-task-id "default")
    (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)
    (setq org-duration-format (quote h:mm))
    (setq org-clock-idle-time 60)
  :bind (("<f7> i" . org-clock-in)
         ("<f7> o" . org-clock-out)))
#+end_src

**** DONE Org clock convenience agenda functions

#+BEGIN_SRC emacs-lisp
  (use-package org-clock-convenience
    :after org-clock
    :delight
    :bind (:map org-agenda-mode-map
                ("<S-up>" . org-clock-convenience-timestamp-up)
                ("<S-down>" . org-clock-convenience-timestamp-down)
                ("o" . org-clock-convenience-fill-gap)
                ("e" . org-clock-convenience-fill-gap-both)))
#+END_SRC

*** DONE Org source code blocks

#+begin_src emacs-lisp
  (use-package org-src
    :after org
    :config
    (setq org-src-tab-acts-natively t)
    (setq org-src-fontify-natively t)
    (org-babel-do-load-languages
     'org-babel-load-languages (quote ((emacs-lisp . t)
                                       (shell . t)
                                       (latex . t)
                                       (ledger . t)
                                       (ditaa . t)
                                       (python . t))))
    (setq org-ditaa-jar-path "/home/jkoch/.emacs.d/dev-pkgs/ditaa0_9/ditaa0_9.jar")
    (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
    :bind (("<f2> c" . org-edit-src-code)
           ("<f2> x" . org-edit-src-exit)))
#+end_src

*** DONE Org export
Define all additional export backends.
Set =pdflatex= as main default way to generate PDF documents from source org-mode files.
Define beamer =LaTeX= class for presentations.

#+BEGIN_SRC emacs-lisp
  (use-package ox
    :after org
    :config
    (setq org-export-backends '(ascii beamer html icalendar latex odt ipynb))
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (add-to-list 'org-latex-packages-alist '("" "color"))
    (setq org-latex-listings t)

    (setq org-latex-pdf-process
          '("pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
            "bibtex %b"
            "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"
            "pdflatex -interaction nonstopmode -shell-escape -output-directory %o %f"))

    (eval-after-load "ox-latex"
      '(add-to-list 'org-latex-classes                                      ; beamer
                    `("beamer"
                      ,(concat "\\documentclass[presentation]{beamer}\n"
                               "[DEFAULT-PACKAGES]"
                               "[PACKAGES]"
                               "[EXTRA]\n")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
    (eval-after-load "ox-latex"
      '(add-to-list 'org-latex-classes                                       ; report (no parts)
                    '("report-noparts"
                      "\\documentclass{report}"
                      ("\\chapter{%s}" . "\\chapter*{%s}")
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                      ("\\paragraph{%s}" . "\\paragraph*{%s}")
                      ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    (eval-after-load "ox-latex"
      '(add-to-list 'org-latex-classes
                    '("svjour3"
                      "\\documentclass{svjour3}"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
    (eval-after-load "ox-latex"
      '(add-to-list 'org-latex-classes
                    '("elsarticle"
                      "\\documentclass{elsarticle}"
                      ("\\section{%s}" . "\\section*{%s}")
                      ("\\subsection{%s}" . "\\subsection*{%s}")
                      ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))))
#+END_SRC

**** DONE Export org-mode to Jupyter notebooks

#+begin_src emacs-lisp
  ;;(use-package ox-ipynb
  ;;  :load-path "dev-pkgs/ox-ipynb")

  (add-to-list 'load-path "~/.emacs.d/dev-pkgs/ox-ipynb")
  (require 'ox-ipynb)
#+end_src

**** DONE Experimental Microsoft Word export
From John Kitchin. Downloaded (static) elisp file.

#+begin_src emacs-lisp
  (use-package ox-word
    :load-path "dev-pkgs/ox-word"
    :commands ox-export-via-latex-pandoc-to-docx-and-open)
#+end_src

*** DONE Org html publishing

#+begin_src emacs-lisp
  (use-package ox
    :after org
    :init  
    ;; Functions to redefine 'org-html-postamble-format'
    (setq org-html-postamble-format '(("en" "<div class='footer'><p>Copyright © 2021 James C Koch</p><p>Last updated %C.</p><br></div>")))
    :config
    (setq org-publish-use-timestamps-flag t)
    (setq org-html-head-include-default-style nil)
    ;(setq org-html-preamble-format '(("en" "")))
  
    (setq org-publish-project-alist
          '(
            ("org-index"
             :base-directory "/winc/jk/website/jckoch.gitlab.io/src" ;; specify full path as string
             :base-extension "org"
             :publishing-directory "/winc/jk/website/jckoch.gitlab.io/public_html"
             :recursive nil
             :publishing-function org-html-publish-to-html
             :htmlized-source t
             :html-postamble t
             )
            ("org-blog"
             :base-directory "/winc/jk/website/jckoch.gitlab.io/src/blog"
             :base-extension "org"
             :publishing-directory "/winc/jk/website/jckoch.gitlab.io/public_html/blog"
             :recursive t
             :publishing-function org-html-publish-to-html
             :htmlized-source t
             :html-postamble t
             )
            ("org-portfolio"
             :base-directory "/winc/jk/website/jckoch.gitlab.io/src/portfolio"
             :base-extension "org"
             :publishing-directory "/winc/jk/website/jckoch.gitlab.io/public_html/portfolio"
             :recursive t
             :publishing-function org-html-publish-to-html
             :htmlized-source t
             :html-postamble t
             )
            ("org-publications"
             :base-directory "/winc/jk/website/jckoch.gitlab.io/src/publications"
             :base-extension "org"
             :publishing-directory "/winc/jk/website/jckoch.gitlab.io/public_html/publications"
             :recursive nil
             :publishing-function org-html-publish-to-html
             :htmlized-source t
             :html-postamble t
             )
            ("org-static"
             :base-directory "/winc/jk/website/jckoch.gitlab.io/src/"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|html"
             :publishing-directory "/winc/jk/website/jckoch.gitlab.io/public_html/"
             :recursive t
             :publishing-function org-publish-attachment
             :htmlized-source t
             :html-postamble t
             )
            ("org"
             :components ("org-index" "org-blog" "org-publications" "org-portfolio" "org-static")
            )
            ("org-index-crkoch"
             :base-directory "/winc/jk/website/crkoch-ualberta-website/src" ;; or specify full path as string
             :base-extension "org"
             :publishing-directory "/winc/jk/website/crkoch-ualberta-website/public_html"
             :recursive nil
             :publishing-function org-html-publish-to-html
             :htmlized-source t
             :html-preamble my-html-preamble
             :html-postamble my-html-postamble
             )
            ("org-research-crkoch"
             :base-directory "/winc/jk/website/crkoch-ualberta-website/src/research"
             :base-extension "org"
             :publishing-directory "/winc/jk/website/crkoch-ualberta-website/public_html/research"
             :recursive t
             :publishing-function org-html-publish-to-html
             :htmlized-source t
             :html-preamble my-html-preamble
             :html-postamble my-html-postamble
             )
            ("org-teaching-crkoch"
             :base-directory "/winc/jk/website/crkoch-ualberta-website/src/teaching"
             :base-extension "org"
             :publishing-directory "/winc/jk/website/crkoch-ualberta-website/public_html/teaching"
             :recursive t
             :publishing-function org-html-publish-to-html
             :htmlized-source t
             :html-preamble my-html-preamble
             :html-postamble my-html-postamble
             )
            ("org-publications-crkoch"
             :base-directory "/winc/jk/website/crkoch-ualberta-website/src/publications"
             :base-extension "org"
             :publishing-directory "/winc/jk/website/crkoch-ualberta-website/public_html/publications"
             :recursive nil
             :publishing-function org-html-publish-to-html
             :htmlized-source t
             :html-preamble my-html-preamble
             :html-postamble my-html-postamble
             )
            ("org-static-crkoch"
             :base-directory "/winc/jk/website/crkoch-ualberta-website/src/"
             :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|html"
             :publishing-directory "/winc/jk/website/crkoch-ualberta-website/public_html/"
             :recursive t
             :publishing-function org-publish-attachment
             :htmlized-source t
             :html-preamble my-html-preamble
             :html-postamble my-html-postamble
             )
            ("org-crkoch"
             :components ("org-index-crkoch" "org-research-crkoch" "org-publications-crkoch" "org-teaching-crkoch" "org-static-crkoch")
            )
            ("thesis-main"
             :base-directory "/winc/jk/chalmers/courses/THESIS/thesis"
             :publishing-directory "/winc/jk/chalmers/courses/THESIS/thesis/publish"
             :publishing-function org-latex-publish-to-latex
             :body-only nil
             :make-index nil
             )
            ("thesis-include"
             :base-directory "/winc/jk/chalmers/courses/THESIS/thesis/include"
             :base-extension "tex"
             :publishing-directory "/winc/jk/chalmers/courses/THESIS/thesis/publish/include"
             :recursive t
             :publishing-function org-publish-attachment
             :body-only t
             :make-index nil
             )
            ("thesis-chapters"
             :base-directory "/winc/jk/chalmers/courses/THESIS/thesis/chapters"
             :publishing-directory "/winc/jk/chalmers/courses/THESIS/thesis/publish/chapters"
             :publishing-function org-latex-publish-to-latex
             :body-only t
             :make-index nil
             )
            ("thesis-figure"
             :base-directory "/winc/jk/chalmers/courses/THESIS/thesis/figure"
             :base-extension "png\\|jpg\\|gif\\|pdf"
             :publishing-directory "/winc/jk/chalmers/courses/THESIS/thesis/publish/figure"
             :recursive t
             :publishing-function org-publish-attachment
             )
            ("thesis"
             :components ("thesis-main" "thesis-include" "thesis-chapters" "thesis-figure")
             ))))
#+end_src

#+RESULTS:
: t

*** DONE Org \LaTeX Mode

#+begin_src emacs-lisp
  (use-package cdlatex
    :after org
    :delight
    :commands turn-on-org-cdlatex)
#+end_src

*** DONE Org bibliography management

#+BEGIN_SRC emacs-lisp
  (use-package org-ref
    :ensure t
    :delight org-ref "bibREF"
    :init
    (require 'org-ref)
    (require 'doi-utils)
    (require 'org-ref-pdf)
    (require 'org-ref-isbn)
    (require 'org-ref-url-utils)
    (defun harvard-cite (key page)            ; harvard style citations
      (interactive (list (completing-read "Cite: " (orhc-bibtex-candidates))
                         (read-string "Page: ")))
      (insert
       (org-make-link-string (format "cite:%s"
                                     (cdr (assoc
                                           "=key="
                                           (cdr (assoc key (orhc-bibtex-candidates))))))
                             page)))

    (defun my/org-ref-open-pdf-at-point ()    ; open pdf with system pdf viewer
      "Open the pdf for bibtex key under point if it exists."
      (interactive)
      (let* ((results (org-ref-get-bibtex-key-and-file))
             (key (car results))
             (pdf-file (funcall org-ref-get-pdf-filename-function key)))
        (if (file-exists-p pdf-file)
            (find-file pdf-file)
          (message "No PDF found for %s" key))))
    :config
    (setq org-ref-bibliography-notes "/winc/jk/references/notes.org"
          org-ref-default-bibliography '("/winc/jk/references/references.bib")
          org-ref-pdf-directory "/winc/jk/references/pdfs/")
    (setq bibtex-completion-pdf-open-function
      (lambda (fpath)
        (start-process "open" "*open*" "open" fpath)))
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-name-year-separator "_"
          bibtex-autokey-year-title-separator "_"
          bibtex-autokey-titleword-separator ""
          bibtex-autokey-titlewords 3
          bibtex-autokey-titlewords-stretch 1
          bibtex-autokey-titleword-length 5)
    (setq org-ref-open-pdf-function 'my/org-ref-open-pdf-at-point)
    (setq org-ref-completion-library 'org-ref-ivy-cite)
    :bind ("C-c i" . org-ref-insert-ref-link))
#+END_SRC

*** DONE Org basic presentations

#+BEGIN_SRC emacs-lisp
  (use-package org-tree-slide
    :defer t
    :delight org-tree-slide "treePRES"
    :bind (("<f1>" . org-tree-slide-mode)))
#+END_SRC

*** DONE Pomodoro technique in org mode

#+begin_src emacs-lisp
  (use-package org-pomodoro
    :ensure t
    :config
    (setq org-pomodoro-manual-break t)
    :bind ("<f7> p" . org-pomodoro))
#+end_src

** DONE \LaTeX documents

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :config
    (setq TeX-auto-save t)
    (setq TeX-parse-self t)
    (setq TeX-save-query nil))

  (use-package reftex
    :after auctex
    :config
    (setq reftex-plug-into-AUCTeX t)
    :hook (LaTeX-mode . turn-on-reftex))
#+END_SRC

** DONE View pdf documents

#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :delight
    :magic  ("%PDF" . pdf-view-mode)
    :config
    (pdf-tools-install)
    (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1))))
#+end_src

** DONE Undo and redo utility
Package improves undo/redo commands within Emacs. Note that custom key binding for undo "C-z" replaces (removes) normal command to minimize the Emacs window.

#+begin_src emacs-lisp
  (use-package undo-tree
    :delight
    :bind (("C-z" . undo-tree-undo)
           ("C-S-z" . redo))
    :config
    (global-undo-tree-mode 1)              ; turn on everywhere
    (defalias 'redo 'undo-tree-redo))
#+end_src

** DONE Buffer list utility
Set the Buffer List buffer as to default with "ibuffer".

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :config
    (setq ibuffer-expert t)
    (setq ibuffer-display-summary nil)
    (setq ibuffer-use-other-window nil)
    (setq ibuffer-show-empty-filter-groups nil)
    (setq ibuffer-movement-cycle nil)
    (setq ibuffer-default-sorting-mode 'filename/process)
    ;;;; NOTE built into the Modus themes
    ;; (setq ibuffer-deletion-face 'dired-flagged)
    ;; (setq ibuffer-marked-face 'dired-marked)
    (setq ibuffer-title-face 'font-lock-doc-face)
    (setq ibuffer-use-header-line t)
    (setq ibuffer-default-shrink-to-minimum-size nil)
    (setq ibuffer-formats
          '((mark modified read-only locked " "
                  (name 30 30 :left :elide)
                  " "
                  (size 9 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " " filename-and-process)
            (mark " "
                  (name 16 -1)
                  " " filename)))
    (setq ibuffer-saved-filter-groups nil)

    ;;;; NOTE use the following if you need to define your own groups
    (setq ibuffer-saved-filter-groups
           '(("Main"
              ("Directories" (mode . dired-mode))
              ("Org" (mode . org-mode))
              ("Programming" (or
                              (mode . c-mode)
                              (mode . conf-mode)
                              (mode . css-mode)
                              (mode . emacs-lisp-mode)
                              (mode . html-mode)
                              (mode . mhtml-mode)
                              (mode . python-mode)
                              (mode . ruby-mode)
                              (mode . scss-mode)
                              (mode . shell-script-mode)
                              (mode . yaml-mode)))
              ("Markdown" (mode . markdown-mode))
              ("Magit" (or
                        (mode . magit-blame-mode)
                        (mode . magit-cherry-mode)
                        (mode . magit-diff-mode)
                        (mode . magit-log-mode)
                        (mode . magit-process-mode)
                        (mode . magit-status-mode)))
              ("Apps" (or
                       (mode . bongo-playlist-mode)
                       (mode . elfeed-search-mode)
                       (mode . elfeed-show-mode)))
              ("Gnus" (or
                       (mode . message-mode)
                       (mode . mail-mode)
                       (mode . gnus-article-mode)
                       (mode . gnus-group-mode)
                       (mode . gnus-server-mode)
                       (mode . gnus-summary-mode)))
              ("Emacs" (or
                        (name . "^\\*Help\\*$")
                        (name . "^\\*Custom.*")
                        (name . "^\\*Org Agenda\\*$")
                        (name . "^\\*info\\*$")
                        (name . "^\\*scratch\\*$")
                        (name . "^\\*Backtrace\\*$")
                        (name . "^\\*Messages\\*$"))))))
    :hook
    (ibuffer-mode . hl-line-mode)
    ;; NOTE enable this if you also intend to use the above filter
    (ibuffer-mode . (lambda ()
                      (ibuffer-switch-to-saved-filter-groups "Main")))
    :bind (("C-x C-b" . ibuffer)
           :map ibuffer-mode-map
           ("/ g" . ibuffer-filter-by-content)))
#+END_SRC

** DONE File utility: Dired
Setup for Dired mode to use as a file utility manager.
For example, turn on when using split panes that the default destination for copying files is the other open pane.

#+begin_src emacs-lisp
  (use-package dired
     :config
     (setq dired-dwim-target t))
#+end_src

** DONE Git utility: Magit
Set up Git version control from within Emacs using the package Magit.

#+begin_src emacs-lisp
  (use-package magit
    :init (cond
           ((eq system-type 'windows-nt)
            (setq magit-git-executable git-executable)))
     :bind (("C-x g" . magit-status)))
#+end_src

#+begin_src emacs-lisp
  (use-package git-commit
    :after magit
    :config
    (setq git-commit-summary-max-length 50)
    (setq git-commit-known-pseudo-headers
          '("Signed-off-by"
            "Acked-by"
            "Modified-by"
            "Cc"
            "Suggested-by"
            "Reported-by"
            "Tested-by"
            "Reviewed-by"))
    (setq git-commit-style-convention-checks
          '(non-empty-second-line
            overlong-summary-line)))
#+end_src

#+begin_src emacs-lisp
  (use-package magit-diff
    :after magit
    :config
    (setq magit-diff-refine-hunk t))

  (use-package diff
    :config
    (setq diff-font-lock-prettify nil)
    (setq diff-font-lock-syntax nil))
#+end_src

*** REVIEW Time machine, anyone

#+begin_src emacs-lisp
  (use-package git-timemachine
    :disabled
    :ensure t
    :commands git-timemachine)
#+end_src

** DONE Finances using double entry accounting
Plain-text double-entry accounting program.

#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :mode "\\.ledger\\'"
    :commands (org-babel-execute:ledger)
    :config
    (add-hook 'ledger-mode-hook
              (lambda ()
                (setq-local tab-always-indent 'complete)
                (setq-local completion-cycle-threshold t)
                (setq-local ledger-complete-in-steps t)
                (setq-local (ledger-clear-whole-transactions t))))
    (setq ledger-post-amount-alignment-column '72))

  (use-package flycheck-ledger
    :after ledger-mode)
#+END_SRC

** DONE RSS Feed Reader: Elfeed

#+begin_src emacs-lisp
  (use-package elfeed
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-x w" . elfeed ))
#+end_src

#+begin_src emacs-lisp
  (use-package elfeed-org
    :config
    (setq elfeed-show-entry-switch 'display-buffer)
    (setq rmh-elfeed-org-files (list (concat default-directory "professional.org"))))
#+end_src

** DONE Try new packages
A package to try out other interesting GNU Emacs packages without having to install the packages.

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
 
