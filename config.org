#+TITLE: Emacs Configuration File 
#+AUTHOR: J. C . Koch
#+EMAIL: jckoch@ualberta.ca

* Personal Information
Set a user name and email address for Emacs to use if needed.

#+begin_src emacs-lisp
(setq user-full-name "Full Name"
      user-mail-address "fullname@gmail.com")
#+end_src

* Sane Defaults
** General
Sane defaults to customize Emacs configuration for the 21st century. 
First globally turn on visual line mode and line numbers for all buffer/file types.
Also, diminish 'visual-line-mode' minor mode display on the mode line (i.e. all buffers will be word wrapped so showing this on the mode line is redundant).

#+begin_src emacs-lisp
(global-visual-line-mode 1) ; 1 for on, 0 for off.
(diminish 'visual-line-mode)
(global-linum-mode 1) ; 1 for on, 0 for off.
#+END_SRC

#+RESULTS:
: t

Next set the default coding system to /UTF-8/ (i.e. unicode).

#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

Set the default tab width to 4 spaces. Change the default behaviour to answering questions to simple 'y' and 'n' characters.

#+BEGIN_SRC emacs-lisp
(setq tab-width 4)

;; Answering just 'y' or 'n' will do
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Stop Emacs from beeping.

#+BEGIN_SRC emacs-lisp
(setq visible-bell t)
#+end_src

Set the Buffer List buffer as to default with "ibuffer".

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq ibuffer-saved-filter-groups
    (quote (("default"
             ("dired" (mode . dired-mode))
	     ("org" (name . "^.*org$"))
	     ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
	     ("programming" (or
	                     (mode . python-mode)
			     (mode . octave-mode)))
             ("emacs" (or
	               (name . "^\\*scratch\\*$")
		       (name . "^\\*Messages\\*$")))
             ))))

(add-hook 'ibuffer-mode-hook
        (lambda ()
	  (ibuffer-auto-mode 1)
	  (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC

#+RESULTS:
| lambda | nil | (ibuffer-auto-mode 1) | (ibuffer-switch-to-saved-filter-groups default) |

Change the default directory that emacs opens in to fit your needs.

#+begin_src emacs-lisp
(setq default-directory "~/Documents")
#+end_src

** IDO
IDO "Interactively DO Things" Mode super-charges Emac's completion engine by improving the speed at which you open files/buffers and switch buffers. IDO Mode completion engine uses so-called flex matching so that it can match anywhere in the name. This means that you can type a few characters until you find a match or you narrow down the list of matches to a manageable subset. Typing //, like in most Linux shells ignores the preceding path and goes back to the top-most directory, works the same in IDO Mode but it also is interactive: it will go to the root (or the root of the current drive in Windows). 

#+begin_src emacs-lisp
(use-package ido
  :ensure t
  :config
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (ido-mode 1))
#+end_src

#+RESULTS:
: t

** Auto Complete
Auto Complete is a mode for Emacs that provides auto completion in buffers. Auto Completion works for most code based modes in Emacs. It does not provide auto completion support in Org-Mode.

#+begin_src emacs-lisp
(use-package auto-complete
  :ensure t
  :diminish auto-complete
  :config
  (global-auto-complete-mode t)
  (ac-config-default))
#+end_src

#+RESULTS:

** Smex
Smex provides interactive auto completion support for Emacs M-x command.

#+begin_src emacs-lisp
(use-package smex
  :ensure t
  :bind (("M-x" . smex))
  :config (smex-initialize))
#+end_src

#+RESULTS:

** Undo-Tree
Package improves undo/redo commands within Emacs. Note that custom key binding for undo "C-z" replaces (removes) normal command to minimize the Emacs window.

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :config
  (global-undo-tree-mode 1) ;;turn on everywhere
  (global-set-key (kbd "C-z") 'undo)
  (defalias 'redo 'undo-tree-redo)
  (global-set-key (kbd "C-S-z") 'redo)
  :diminish undo-tree-mode)
#+END_SRC

#+RESULTS:
: t

** Try Other Packages
A package to try other Emacs Packages without having to install the package.

#+BEGIN_SRC emacs-lisp
(use-package try
  :ensure t)
#+END_SRC

#+RESULTS:

** Which Key Help Package
This package helps provide suggestions to finish key completion.

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config (which-key-mode)
  :diminish which-key-mode)
#+END_SRC

#+RESULTS:
: t

* Emacs Appearance
** Window Splitting Commands
These custom emacs-lisp functions redefine vertically and horizontal window splitting emacs functions in order to switch to the other window when the emacs window is split into two windows. 

#+begin_src emacs-lisp
(defun vsplit-other-window ()
  "Splits the window vertically and switches to that window."
  (interactive)
  (split-window-vertically)
  (other-window 1 nil))
(defun hsplit-other-window ()
  "Splits the window horizontally and switches to that window."
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil))

(bind-key "C-x 2" 'vsplit-other-window)
(bind-key "C-x 3" 'hsplit-other-window)
#+end_src

#+RESULTS:
: hsplit-other-window

** Themes
Set the default theme to the tango-dark, font to Monospace-14, and change the cursor to a hbar. 
Set the cursor to stop blinking.

#+begin_src emacs-lisp
(load-theme 'tango-dark)

;; Alternative Black and White Basic Theme
;;(set-background-color "black")
;;(set-foreground-color "white")
;;(set-cursor-color "coral")

(add-to-list 'default-frame-alist
             '(font . "Monospace-14"))

(set-default 'cursor-type 'hbar)
(blink-cursor-mode -1)
#+end_src 

 #+RESULTS:

*** Switch Themes
The following emacs-lisp function allows for easy switching of themes and the ability to disable the active theme. M-<F12> can be used to switch themes while M-<F11> to disable current theme.

#+begin_src emacs-lisp
(defun switch-theme (theme)
  "Disables any currently active themes and loads THEME."
  ;; This interactive call is taken from `load-theme'
  (interactive
   (list
    (intern (completing-read "Load custom theme: "
                             (mapc 'symbol-name
                                   (custom-available-themes))))))
  (let ((enabled-themes custom-enabled-themes))
    (mapc #'disable-theme custom-enabled-themes)
    (load-theme theme t)))

;; lisp function ot disable active theme
(defun disable-active-themes ()
  "Disables any currently active themes listed in `custom-enabled-themes'."
  (interactive)
  (mapc #'disable-theme custom-enabled-themes))

(bind-key "M-<f12>" 'switch-theme) 
(bind-key "M-<f11>" 'disable-active-themes)
 #+end_src

 #+RESULTS:
 : disable-active-themes
* Python
Elpy is used to customize python in emacs to a fullfledged IDE.

#+BEGIN_SRC emacs-lisp
(use-package elpy 
  :ensure t
  :config
  (elpy-enable)
  (setq python-shell-prompt-detect-failure-warning nil))
#+END_SRC

#+RESULTS:
: t

ob-ipython is used for interactive python source blocks in Org-Mode.
Note: At the moment this will break the configuration. 
You must manually install ob-ipython using "M-x list-packages". Otherwise manually clone the git repository of "ob-ipython" and add to the Emacs load path.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp/ob-ipython")
(use-package ob-ipython
   :ensure t
   :config
   (setq python-shell-completion-native-enable t)
   (setq python-shell-prompt-detect-failure-warning nil))
#+END_SRC

#+RESULTS:
: t
* Org-Mode
** *TODO* Keywords

This defines a basic workflow of TODO keywords.

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

(setq org-todo-keyword-faces
      (quote (("TODO" :foreground "red" :weight bold)
              ("NEXT" :foreground "blue" :weight bold)
              ("DONE" :foreground "forest green" :weight bold)
              ("WAITING" :foreground "orange" :weight bold)
              ("HOLD" :foreground "magenta" :weight bold)
              ("CANCELLED" :foreground "forest green" :weight bold)
              ("MEETING" :foreground "forest green" :weight bold)
              ("PHONE" :foreground "forest green" :weight bold))))
#+END_SRC

#+RESULTS:
| TODO      | :foreground | red          | :weight | bold |
| NEXT      | :foreground | blue         | :weight | bold |
| DONE      | :foreground | forest green | :weight | bold |
| WAITING   | :foreground | orange       | :weight | bold |
| HOLD      | :foreground | magenta      | :weight | bold |
| CANCELLED | :foreground | forest green | :weight | bold |
| MEETING   | :foreground | forest green | :weight | bold |
| PHONE     | :foreground | forest green | :weight | bold |

** Set Often Used Keys

#+begin_src emacs-lisp
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cl" 'org-insert-link)
(global-set-key "\C-o" 'org-open-at-point)
(bind-key "\C-c \C-x F" 'org-agenda-file-to-front)
(bind-key "\C-c \C-x r" 'org-remove-file)
#+end_src

#+RESULTS:
: org-remove-file

** Set Agenda Files
Set directory where all my files for the Org-Mode Agenda exist. Change or comment this out as necessary.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (quote ("~/Documents")))
#+END_SRC

** Export Backend Customization
*** Org Export Backend
OpenOffice (odt) export backend added to org-export-dispatcher as key bindings. This may or may not function as intended on Windows systems.

#+BEGIN_SRC emacs-lisp
(setq org-export-backends '(ascii beamer html icalendar latex odt))
#+END_SRC

#+RESULTS:
| ascii | beamer | html | icalendar | latex | odt |

*** LaTeX to PDF Process 
The LaTeX to PDF process is set for org-mode in order to properly export citations using BibTeX. Some tweaks may be necessary for this to work on Windows (a TeX distribution is necessary).

#+begin_src emacs-lisp
;; Set the pdf export process from org-mode
;; done to ensure citations and bibiographies are exported to LaTeX properly
(setq org-latex-pdf-process
    '("pdflatex -interaction nonstopmode -output-directory %o %f"
      "bibtex %b" 
      "pdflatex -interaction nonstopmode -output-directory %o %f" 
      "pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_src

#+RESULTS:
| pdflatex -interaction nonstopmode -output-directory %o %f | bibtex %b | pdflatex -interaction nonstopmode -output-directory %o %f | pdflatex -interaction nonstopmode -output-directory %o %f |

*** LaTeX Beamer
Add Beamer LaTeX class to list of Org-Mode LaTeX classes available.

#+begin_src emacs-lisp
(eval-after-load "ox-latex"
  ;; update the list of LaTeX classes and associated header (encoding, etc.) 
  ;; and structure
  '(add-to-list 'org-latex-classes
                `("beamer"
                  ,(concat "\\documentclass[presentation]{beamer}\n"
                           "[DEFAULT-PACKAGES]"
                           "[PACKAGES]"
                           "[EXTRA]\n")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))
#+end_src

#+RESULTS:
** Org-Ref Citation Manager
Org-Ref is a citation manager for Org-Mode. The setup includes pointing Org-Ref to a default (general) BibTeX file as the default bibliography as well as a directory containing the article as a PDF file. The Org-Ref documentation also suggests setting a notes file (currently I am not using this feature).

#+BEGIN_SRC emacs-lisp
(use-package org-ref 
  :ensure t
  :config
  (require 'org-ref)
  (require 'doi-utils)
  (setq org-ref-bibliography-notes "~/references/notes.org"
        org-ref-default-bibliography '("~/references/REFERENCES.bib")
        org-ref-pdf-directory "~/references/bibtex-pdfs/")
  (setq bibtex-completion-pdf-open-function
    (lambda (fpath)
      (start-process "open" "*open*" "open" fpath))))
#+END_SRC

#+RESULTS:
: t

Org-Ref is also great at Figure/Table/Equation references. The default key binding to insert a ref link for this type of cross-reference conflicts with the Org-Mode add file to Agenda list so is therefore changed to "C-c i". On some systems it may also be necessary on export to LaTeX/PDF to set the variable 'org-latex-prefer-user-labels' to nil (this is known bug in the Org-Ref GitHub repository).

#+BEGIN_SRC emacs-lisp
(setq org-latex-prefer-user-labels nil)
(bind-key "\C-c i" 'org-ref-helm-insert-ref-link)
#+END_SRC

#+RESULTS:
: org-ref-helm-insert-ref-link

** Org Babel Languages
Default of emacs-lisp, ipython, python, and shell languages supported for org-babel. Code blocks run without need for confirmation by default. 
Note: Running IPython in Emacs requires the "ob-ipython" package. See activation in [[Python]]. 

#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages (quote ((emacs-lisp . t)
                                     (latex . t)
                                     (python . t)
				     (ipython . t)
                                     (octave . t)
                                     (sh . t)
                                     (ledger . t)
				     (R . t))))

  (setq org-confirm-babel-evaluate nil)
  (setq org-src-fontify-natively t)
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images 'append)
  (bind-key "<f2>" 'org-edit-src-code)
  (bind-key "<f3>" 'org-edit-src-exit)
#+end_src

#+RESULTS:
: org-edit-src-exit
** Clock Report Customizations
This changes the default behaviour of clock reports greater than 24 hours to report as "X day + X hours" to be reported as "X hours:Y minutes".

#+BEGIN_SRC emacs-lisp
(setq org-time-clocksum-format (quote (:hours "%d" :require-hours t :minutes ":%02d" :require-minutes t)))
#+END_SRC

** CDLATEX Mode for Math Characters
Math character input mode can be turned on/off with the new key binding "C-c C-g".
This allows for the "`" character to be used other than for inserting math characters.

#+BEGIN_SRC emacs-lisp
(use-package cdlatex
  :ensure t
  :bind ("\C-c \C-g" . org-cdlatex-mode))
#+END_SRC

#+RESULTS:

** Org-Capture-Templates
These are some org-capture-templates taken from [[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
Currently not using these but will look to see whether they are useful.

#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "/winc/jk/myLife/refile.org")

(global-set-key (kbd "C-c c") 'org-capture)

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Desktop/refile.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/Desktop/refile.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/Desktop/refile.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/Desktop/diary.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/Desktop/refile.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("m" "Meeting" entry (file "~/Desktop/refile.org")
               "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
              ("p" "Phone call" entry (file "~/Desktop/refile.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/Desktop/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
#+END_SRC

#+RESULTS:
| t | todo | entry | (file ~/Desktop/refile.org) | * TODO %? |
* LaTeX
** AUCTeX
Configure AUCTeX to edit TeX files.

#+begin_src emacs-lisp
(use-package tex
  :ensure auctex
  :defer t
  :config
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq TeX-save-query nil)
  (setq TeX-view-program-list '("Okular" "okular --unique %o#src:%n%b"))
  (setq TeX-view-program-selection '((output-dvi "Okular")
                                     (output-pdf "Okular"))))
#+end_src

#+RESULTS:
: t

** RefTeX
Configure RefTeX (citation engine for LaTeX) to plug into AUCTeX.
For when working on TeX files.

#+begin_src emacs-lisp
(use-package reftex
  :ensure t
  :defer t
  :config
  (setq reftex-plug-into-AUCTeX t)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex))
#+end_src

#+RESULTS:
: t
* Flyspell
Enable Flyspell Mode. 
If you keep your spell check personal dictionary in particular location, change this variable as desired. 
Some of this configuration is taken from Joel Kuiper (https://joelkuiper.eu/spellcheck_emacs).

#+begin_src emacs-lisp
(use-package ispell
  :ensure t
  :bind (("<f8>" . ispell-word)
         ("M-<f8>" . flyspell-mode))
  :config 
  (setq-default ispell-program-name "aspell")
  (setq ispell-personal-dictionary "~/.emacs.d/.ispell")
  (dolist (hook '(text-mode-hook))
     (add-hook hook (lambda () (flyspell-mode 1))))
  (dolist (mode '(emacs-lisp-mode-hook
                  python-mode-hook
		  R-mode-hook))
     (add-hook mode (lambda () (flyspell-prog-mode))))
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word))
  :diminish flyspell-mode)
#+end_src

#+RESULTS:  

* Magit
Set up Git version control from within Emacs using the package Magit.

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status)
  :defer t)
#+end_src

#+RESULTS:
